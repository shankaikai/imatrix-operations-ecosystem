// Showcasing the capabilities of protobuf with gRPC

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: proto/operations_ecosys.proto

package operations_ecosys

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBy int32

const (
	OrderBy_ASC  OrderBy = 0
	OrderBy_DESC OrderBy = 1
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	OrderBy_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[0].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[0]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{0}
}

type User_UserType int32

const (
	User_ISPECIALIST    User_UserType = 0
	User_SECURITY_GUARD User_UserType = 1
	User_CONTROLLER     User_UserType = 2
	User_MANAGER        User_UserType = 3
)

// Enum value maps for User_UserType.
var (
	User_UserType_name = map[int32]string{
		0: "ISPECIALIST",
		1: "SECURITY_GUARD",
		2: "CONTROLLER",
		3: "MANAGER",
	}
	User_UserType_value = map[string]int32{
		"ISPECIALIST":    0,
		"SECURITY_GUARD": 1,
		"CONTROLLER":     2,
		"MANAGER":        3,
	}
)

func (x User_UserType) Enum() *User_UserType {
	p := new(User_UserType)
	*p = x
	return p
}

func (x User_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[1].Descriptor()
}

func (User_UserType) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[1]
}

func (x User_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_UserType.Descriptor instead.
func (User_UserType) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{0, 0}
}

// More fields can be added in the future.
type UserFilter_Field int32

const (
	UserFilter_USER_ID         UserFilter_Field = 0
	UserFilter_TYPE            UserFilter_Field = 1
	UserFilter_NAME            UserFilter_Field = 2
	UserFilter_EMAIL           UserFilter_Field = 3
	UserFilter_PHONE_NUMBER    UserFilter_Field = 4
	UserFilter_TELEGRAM_HANDLE UserFilter_Field = 5
	UserFilter_IS_PART_TIMER   UserFilter_Field = 6
)

// Enum value maps for UserFilter_Field.
var (
	UserFilter_Field_name = map[int32]string{
		0: "USER_ID",
		1: "TYPE",
		2: "NAME",
		3: "EMAIL",
		4: "PHONE_NUMBER",
		5: "TELEGRAM_HANDLE",
		6: "IS_PART_TIMER",
	}
	UserFilter_Field_value = map[string]int32{
		"USER_ID":         0,
		"TYPE":            1,
		"NAME":            2,
		"EMAIL":           3,
		"PHONE_NUMBER":    4,
		"TELEGRAM_HANDLE": 5,
		"IS_PART_TIMER":   6,
	}
)

func (x UserFilter_Field) Enum() *UserFilter_Field {
	p := new(UserFilter_Field)
	*p = x
	return p
}

func (x UserFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[2].Descriptor()
}

func (UserFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[2]
}

func (x UserFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserFilter_Field.Descriptor instead.
func (UserFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{2, 0}
}

// More fields can be added in the future.
type ClientFilter_Field int32

const (
	ClientFilter_CLIENT_ID ClientFilter_Field = 0
)

// Enum value maps for ClientFilter_Field.
var (
	ClientFilter_Field_name = map[int32]string{
		0: "CLIENT_ID",
	}
	ClientFilter_Field_value = map[string]int32{
		"CLIENT_ID": 0,
	}
)

func (x ClientFilter_Field) Enum() *ClientFilter_Field {
	p := new(ClientFilter_Field)
	*p = x
	return p
}

func (x ClientFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[3].Descriptor()
}

func (ClientFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[3]
}

func (x ClientFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientFilter_Field.Descriptor instead.
func (ClientFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{7, 0}
}

type Broadcast_BroadcastType int32

const (
	Broadcast_ANNOUNCEMENT Broadcast_BroadcastType = 0
	Broadcast_ASSIGNMENT   Broadcast_BroadcastType = 1
)

// Enum value maps for Broadcast_BroadcastType.
var (
	Broadcast_BroadcastType_name = map[int32]string{
		0: "ANNOUNCEMENT",
		1: "ASSIGNMENT",
	}
	Broadcast_BroadcastType_value = map[string]int32{
		"ANNOUNCEMENT": 0,
		"ASSIGNMENT":   1,
	}
)

func (x Broadcast_BroadcastType) Enum() *Broadcast_BroadcastType {
	p := new(Broadcast_BroadcastType)
	*p = x
	return p
}

func (x Broadcast_BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Broadcast_BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[4].Descriptor()
}

func (Broadcast_BroadcastType) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[4]
}

func (x Broadcast_BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Broadcast_BroadcastType.Descriptor instead.
func (Broadcast_BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{10, 0}
}

type Broadcast_UrgencyType int32

const (
	Broadcast_LOW    Broadcast_UrgencyType = 0
	Broadcast_MEDIUM Broadcast_UrgencyType = 1
	Broadcast_HIGH   Broadcast_UrgencyType = 2
)

// Enum value maps for Broadcast_UrgencyType.
var (
	Broadcast_UrgencyType_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
	}
	Broadcast_UrgencyType_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
	}
)

func (x Broadcast_UrgencyType) Enum() *Broadcast_UrgencyType {
	p := new(Broadcast_UrgencyType)
	*p = x
	return p
}

func (x Broadcast_UrgencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Broadcast_UrgencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[5].Descriptor()
}

func (Broadcast_UrgencyType) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[5]
}

func (x Broadcast_UrgencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Broadcast_UrgencyType.Descriptor instead.
func (Broadcast_UrgencyType) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{10, 1}
}

// More fields can be added in the future.
type BroadcastFilter_Field int32

const (
	BroadcastFilter_BROADCAST_ID  BroadcastFilter_Field = 0
	BroadcastFilter_TYPE          BroadcastFilter_Field = 1
	BroadcastFilter_CONTENT       BroadcastFilter_Field = 2
	BroadcastFilter_CREATION_DATE BroadcastFilter_Field = 3
	BroadcastFilter_DEADLINE      BroadcastFilter_Field = 4
	// Creator and recipient values should
	// be the user id of these users
	BroadcastFilter_CREATOR_ID BroadcastFilter_Field = 5
	// Note: Single recipient
	BroadcastFilter_RECEIPEIENT_ID               BroadcastFilter_Field = 6
	BroadcastFilter_NUM_RECEIPIENTS              BroadcastFilter_Field = 7
	BroadcastFilter_URGENCY                      BroadcastFilter_Field = 8
	BroadcastFilter_AIFS_ID                      BroadcastFilter_Field = 9
	BroadcastFilter_BROADCAST_RECIPIENT_TABLE_ID BroadcastFilter_Field = 10
)

// Enum value maps for BroadcastFilter_Field.
var (
	BroadcastFilter_Field_name = map[int32]string{
		0:  "BROADCAST_ID",
		1:  "TYPE",
		2:  "CONTENT",
		3:  "CREATION_DATE",
		4:  "DEADLINE",
		5:  "CREATOR_ID",
		6:  "RECEIPEIENT_ID",
		7:  "NUM_RECEIPIENTS",
		8:  "URGENCY",
		9:  "AIFS_ID",
		10: "BROADCAST_RECIPIENT_TABLE_ID",
	}
	BroadcastFilter_Field_value = map[string]int32{
		"BROADCAST_ID":                 0,
		"TYPE":                         1,
		"CONTENT":                      2,
		"CREATION_DATE":                3,
		"DEADLINE":                     4,
		"CREATOR_ID":                   5,
		"RECEIPEIENT_ID":               6,
		"NUM_RECEIPIENTS":              7,
		"URGENCY":                      8,
		"AIFS_ID":                      9,
		"BROADCAST_RECIPIENT_TABLE_ID": 10,
	}
)

func (x BroadcastFilter_Field) Enum() *BroadcastFilter_Field {
	p := new(BroadcastFilter_Field)
	*p = x
	return p
}

func (x BroadcastFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[6].Descriptor()
}

func (BroadcastFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[6]
}

func (x BroadcastFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastFilter_Field.Descriptor instead.
func (BroadcastFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{14, 0}
}

type Roster_Status int32

const (
	Roster_IS_DEFAULT Roster_Status = 0
	Roster_PENDING    Roster_Status = 1
	Roster_CONFIRMED  Roster_Status = 2
	Roster_REJECTED   Roster_Status = 3
)

// Enum value maps for Roster_Status.
var (
	Roster_Status_name = map[int32]string{
		0: "IS_DEFAULT",
		1: "PENDING",
		2: "CONFIRMED",
		3: "REJECTED",
	}
	Roster_Status_value = map[string]int32{
		"IS_DEFAULT": 0,
		"PENDING":    1,
		"CONFIRMED":  2,
		"REJECTED":   3,
	}
)

func (x Roster_Status) Enum() *Roster_Status {
	p := new(Roster_Status)
	*p = x
	return p
}

func (x Roster_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Roster_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[7].Descriptor()
}

func (Roster_Status) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[7]
}

func (x Roster_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Roster_Status.Descriptor instead.
func (Roster_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{17, 0}
}

// More fields can be added in the future.
type RosterFilter_Field int32

const (
	RosterFilter_ROSTER_ID             RosterFilter_Field = 0
	RosterFilter_ROSTER_ASSIGNMENT_ID  RosterFilter_Field = 1
	RosterFilter_ROSTER_AIFS_CLIENT_ID RosterFilter_Field = 2
	RosterFilter_AIFS_ID               RosterFilter_Field = 3
	// Note: single user ID
	RosterFilter_GUARD_ASSIGNED_ID RosterFilter_Field = 4
	// Note: single client ID
	RosterFilter_CLIENT_ID                     RosterFilter_Field = 5
	RosterFilter_GUARD_ASSIGNMENT_CONFIRMATION RosterFilter_Field = 6
	RosterFilter_GUARD_ASSIGNMENT_ATTENDED     RosterFilter_Field = 7
	RosterFilter_START_TIME                    RosterFilter_Field = 8
	RosterFilter_END_TIME                      RosterFilter_Field = 9
	RosterFilter_IS_ASSIGNED                   RosterFilter_Field = 10
	RosterFilter_DEFAULT_ROSTERING_DAY_OF_WEEK RosterFilter_Field = 11
	RosterFilter_GUARD_ASSIGNMENT_REJECTION    RosterFilter_Field = 12
)

// Enum value maps for RosterFilter_Field.
var (
	RosterFilter_Field_name = map[int32]string{
		0:  "ROSTER_ID",
		1:  "ROSTER_ASSIGNMENT_ID",
		2:  "ROSTER_AIFS_CLIENT_ID",
		3:  "AIFS_ID",
		4:  "GUARD_ASSIGNED_ID",
		5:  "CLIENT_ID",
		6:  "GUARD_ASSIGNMENT_CONFIRMATION",
		7:  "GUARD_ASSIGNMENT_ATTENDED",
		8:  "START_TIME",
		9:  "END_TIME",
		10: "IS_ASSIGNED",
		11: "DEFAULT_ROSTERING_DAY_OF_WEEK",
		12: "GUARD_ASSIGNMENT_REJECTION",
	}
	RosterFilter_Field_value = map[string]int32{
		"ROSTER_ID":                     0,
		"ROSTER_ASSIGNMENT_ID":          1,
		"ROSTER_AIFS_CLIENT_ID":         2,
		"AIFS_ID":                       3,
		"GUARD_ASSIGNED_ID":             4,
		"CLIENT_ID":                     5,
		"GUARD_ASSIGNMENT_CONFIRMATION": 6,
		"GUARD_ASSIGNMENT_ATTENDED":     7,
		"START_TIME":                    8,
		"END_TIME":                      9,
		"IS_ASSIGNED":                   10,
		"DEFAULT_ROSTERING_DAY_OF_WEEK": 11,
		"GUARD_ASSIGNMENT_REJECTION":    12,
	}
)

func (x RosterFilter_Field) Enum() *RosterFilter_Field {
	p := new(RosterFilter_Field)
	*p = x
	return p
}

func (x RosterFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RosterFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[8].Descriptor()
}

func (RosterFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[8]
}

func (x RosterFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RosterFilter_Field.Descriptor instead.
func (RosterFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{22, 0}
}

// More fields can be added in the future.
type AvailabilityFilter_Field int32

const (
	AvailabilityFilter_AVAILABILITY_ID AvailabilityFilter_Field = 0
	// Week of the year
	AvailabilityFilter_WEEK AvailabilityFilter_Field = 1
	AvailabilityFilter_YEAR AvailabilityFilter_Field = 2
	// Note: single user ID
	AvailabilityFilter_GUARD_ID AvailabilityFilter_Field = 3
	// Day of the week to look at
	// The values for these fields in Filter comparisons
	// should be an empty string
	AvailabilityFilter_SUN      AvailabilityFilter_Field = 4
	AvailabilityFilter_MON      AvailabilityFilter_Field = 5
	AvailabilityFilter_TUES     AvailabilityFilter_Field = 6
	AvailabilityFilter_WED      AvailabilityFilter_Field = 7
	AvailabilityFilter_THURS    AvailabilityFilter_Field = 8
	AvailabilityFilter_FRI      AvailabilityFilter_Field = 9
	AvailabilityFilter_SAT      AvailabilityFilter_Field = 10
	AvailabilityFilter_NEXT_SUN AvailabilityFilter_Field = 11
)

// Enum value maps for AvailabilityFilter_Field.
var (
	AvailabilityFilter_Field_name = map[int32]string{
		0:  "AVAILABILITY_ID",
		1:  "WEEK",
		2:  "YEAR",
		3:  "GUARD_ID",
		4:  "SUN",
		5:  "MON",
		6:  "TUES",
		7:  "WED",
		8:  "THURS",
		9:  "FRI",
		10: "SAT",
		11: "NEXT_SUN",
	}
	AvailabilityFilter_Field_value = map[string]int32{
		"AVAILABILITY_ID": 0,
		"WEEK":            1,
		"YEAR":            2,
		"GUARD_ID":        3,
		"SUN":             4,
		"MON":             5,
		"TUES":            6,
		"WED":             7,
		"THURS":           8,
		"FRI":             9,
		"SAT":             10,
		"NEXT_SUN":        11,
	}
)

func (x AvailabilityFilter_Field) Enum() *AvailabilityFilter_Field {
	p := new(AvailabilityFilter_Field)
	*p = x
	return p
}

func (x AvailabilityFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[9].Descriptor()
}

func (AvailabilityFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[9]
}

func (x AvailabilityFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityFilter_Field.Descriptor instead.
func (AvailabilityFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{27, 0}
}

type Response_Type int32

const (
	Response_ACK   Response_Type = 0
	Response_ERROR Response_Type = 1
)

// Enum value maps for Response_Type.
var (
	Response_Type_name = map[int32]string{
		0: "ACK",
		1: "ERROR",
	}
	Response_Type_value = map[string]int32{
		"ACK":   0,
		"ERROR": 1,
	}
)

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[10].Descriptor()
}

func (Response_Type) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[10]
}

func (x Response_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Type.Descriptor instead.
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{30, 0}
}

type Filter_Comparisons int32

const (
	Filter_GREATER    Filter_Comparisons = 0
	Filter_GREATER_EQ Filter_Comparisons = 1
	Filter_EQUAL      Filter_Comparisons = 2
	Filter_LESSER_EQ  Filter_Comparisons = 3
	Filter_LESSER     Filter_Comparisons = 4
	Filter_CONTAINS   Filter_Comparisons = 5
	Filter_IN         Filter_Comparisons = 6
	Filter_NOT_IN     Filter_Comparisons = 7
)

// Enum value maps for Filter_Comparisons.
var (
	Filter_Comparisons_name = map[int32]string{
		0: "GREATER",
		1: "GREATER_EQ",
		2: "EQUAL",
		3: "LESSER_EQ",
		4: "LESSER",
		5: "CONTAINS",
		6: "IN",
		7: "NOT_IN",
	}
	Filter_Comparisons_value = map[string]int32{
		"GREATER":    0,
		"GREATER_EQ": 1,
		"EQUAL":      2,
		"LESSER_EQ":  3,
		"LESSER":     4,
		"CONTAINS":   5,
		"IN":         6,
		"NOT_IN":     7,
	}
)

func (x Filter_Comparisons) Enum() *Filter_Comparisons {
	p := new(Filter_Comparisons)
	*p = x
	return p
}

func (x Filter_Comparisons) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Comparisons) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[11].Descriptor()
}

func (Filter_Comparisons) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[11]
}

func (x Filter_Comparisons) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Comparisons.Descriptor instead.
func (Filter_Comparisons) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{31, 0}
}

// All users who use the operations ecosystem.
// TODO: decide if we want to have an inactive field for users
//       so that we don't need to delete users completely.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserType        User_UserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=operations_ecosys.User_UserType" json:"user_type,omitempty"`
	Name            string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Email           string        `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber     string        `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelegramHandle  string        `protobuf:"bytes,6,opt,name=telegram_handle,json=telegramHandle,proto3" json:"telegram_handle,omitempty"`
	UserSecurityImg string        `protobuf:"bytes,7,opt,name=user_security_img,json=userSecurityImg,proto3" json:"user_security_img,omitempty"`
	IsPartTimer     bool          `protobuf:"varint,8,opt,name=is_part_timer,json=isPartTimer,proto3" json:"is_part_timer,omitempty"`
	TeleChatId      int64         `protobuf:"varint,9,opt,name=tele_chat_id,json=teleChatId,proto3" json:"tele_chat_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUserType() User_UserType {
	if x != nil {
		return x.UserType
	}
	return User_ISPECIALIST
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *User) GetTelegramHandle() string {
	if x != nil {
		return x.TelegramHandle
	}
	return ""
}

func (x *User) GetUserSecurityImg() string {
	if x != nil {
		return x.UserSecurityImg
	}
	return ""
}

func (x *User) GetIsPartTimer() bool {
	if x != nil {
		return x.IsPartTimer
	}
	return false
}

func (x *User) GetTeleChatId() int64 {
	if x != nil {
		return x.TeleChatId
	}
	return 0
}

// Passing around multiple users in one message.
type UsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	User     *User     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UsersResponse) Reset() {
	*x = UsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersResponse) ProtoMessage() {}

func (x *UsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersResponse.ProtoReflect.Descriptor instead.
func (*UsersResponse) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{1}
}

func (x *UsersResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UsersResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Filter the types of users to be returned.
type UserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       UserFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.UserFilter_Field" json:"field,omitempty"`
	Comparisons *Filter          `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *UserFilter) Reset() {
	*x = UserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFilter) ProtoMessage() {}

func (x *UserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFilter.ProtoReflect.Descriptor instead.
func (*UserFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{2}
}

func (x *UserFilter) GetField() UserFilter_Field {
	if x != nil {
		return x.Field
	}
	return UserFilter_USER_ID
}

func (x *UserFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types users as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 10 will be used if the field is empty.
type UserQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*UserFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 5 objects should be shown, limit = 5;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip n rows from the database
	Skip int64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Order the queries, by default the order is desc by creation date
	OrderBy *OrderByUser `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *UserQuery) Reset() {
	*x = UserQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuery) ProtoMessage() {}

func (x *UserQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuery.ProtoReflect.Descriptor instead.
func (*UserQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{3}
}

func (x *UserQuery) GetFilters() []*UserFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *UserQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserQuery) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *UserQuery) GetOrderBy() *OrderByUser {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type OrderByUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   UserFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.UserFilter_Field" json:"field,omitempty"`
	OrderBy OrderBy          `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=operations_ecosys.OrderBy" json:"order_by,omitempty"`
}

func (x *OrderByUser) Reset() {
	*x = OrderByUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByUser) ProtoMessage() {}

func (x *OrderByUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByUser.ProtoReflect.Descriptor instead.
func (*OrderByUser) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{4}
}

func (x *OrderByUser) GetField() UserFilter_Field {
	if x != nil {
		return x.Field
	}
	return UserFilter_USER_ID
}

func (x *OrderByUser) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ASC
}

// All clients who hire the company to protect their compounds.
// TODO: decide if we want to have an inactive field for clients
//       so that we don't need to delete cleints completely.
type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     int64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Abbreviation string `protobuf:"bytes,3,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Email        string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address      string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	PostalCode   int64  `protobuf:"varint,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PhoneNumber  string `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{5}
}

func (x *Client) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *Client) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Client) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Client) GetPostalCode() int64 {
	if x != nil {
		return x.PostalCode
	}
	return 0
}

func (x *Client) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type ClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Client   *Client   `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *ClientResponse) Reset() {
	*x = ClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponse) ProtoMessage() {}

func (x *ClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponse.ProtoReflect.Descriptor instead.
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{6}
}

func (x *ClientResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ClientResponse) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

// Filter the types of clients to be returned.
type ClientFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       ClientFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.ClientFilter_Field" json:"field,omitempty"`
	Comparisons *Filter            `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *ClientFilter) Reset() {
	*x = ClientFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFilter) ProtoMessage() {}

func (x *ClientFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFilter.ProtoReflect.Descriptor instead.
func (*ClientFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{7}
}

func (x *ClientFilter) GetField() ClientFilter_Field {
	if x != nil {
		return x.Field
	}
	return ClientFilter_CLIENT_ID
}

func (x *ClientFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types clients as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 10 will be used if the field is empty.
type ClientQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*ClientFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 5 objects should be shown, limit = 5;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip n rows from the database
	Skip int64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Order the queries, by default the order is desc by creation date
	OrderBy *OrderByClient `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ClientQuery) Reset() {
	*x = ClientQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientQuery) ProtoMessage() {}

func (x *ClientQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientQuery.ProtoReflect.Descriptor instead.
func (*ClientQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{8}
}

func (x *ClientQuery) GetFilters() []*ClientFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ClientQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ClientQuery) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ClientQuery) GetOrderBy() *OrderByClient {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type OrderByClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   ClientFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.ClientFilter_Field" json:"field,omitempty"`
	OrderBy OrderBy            `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=operations_ecosys.OrderBy" json:"order_by,omitempty"`
}

func (x *OrderByClient) Reset() {
	*x = OrderByClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByClient) ProtoMessage() {}

func (x *OrderByClient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByClient.ProtoReflect.Descriptor instead.
func (*OrderByClient) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{9}
}

func (x *OrderByClient) GetField() ClientFilter_Field {
	if x != nil {
		return x.Field
	}
	return ClientFilter_CLIENT_ID
}

func (x *OrderByClient) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ASC
}

// The default fields of a broadcast
type Broadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Broadcast IDs are only useful for the backend database.
	BroadcastId  int64                   `protobuf:"varint,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	Type         Broadcast_BroadcastType `protobuf:"varint,2,opt,name=type,proto3,enum=operations_ecosys.Broadcast_BroadcastType" json:"type,omitempty"`
	Content      string                  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CreationDate *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Deadline     *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// The whole user fields does not need to be filled,
	// as long as the user is identifiable.
	Creator    *User                     `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Recipients []*AIFSBroadcastRecipient `protobuf:"bytes,7,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Urgency    Broadcast_UrgencyType     `protobuf:"varint,8,opt,name=urgency,proto3,enum=operations_ecosys.Broadcast_UrgencyType" json:"urgency,omitempty"`
}

func (x *Broadcast) Reset() {
	*x = Broadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broadcast) ProtoMessage() {}

func (x *Broadcast) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broadcast.ProtoReflect.Descriptor instead.
func (*Broadcast) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{10}
}

func (x *Broadcast) GetBroadcastId() int64 {
	if x != nil {
		return x.BroadcastId
	}
	return 0
}

func (x *Broadcast) GetType() Broadcast_BroadcastType {
	if x != nil {
		return x.Type
	}
	return Broadcast_ANNOUNCEMENT
}

func (x *Broadcast) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Broadcast) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Broadcast) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Broadcast) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Broadcast) GetRecipients() []*AIFSBroadcastRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Broadcast) GetUrgency() Broadcast_UrgencyType {
	if x != nil {
		return x.Urgency
	}
	return Broadcast_LOW
}

type AIFSBroadcastRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient []*BroadcastRecipient `protobuf:"bytes,1,rep,name=recipient,proto3" json:"recipient,omitempty"`
	AifsId    int64                 `protobuf:"varint,2,opt,name=aifs_id,json=aifsId,proto3" json:"aifs_id,omitempty"`
}

func (x *AIFSBroadcastRecipient) Reset() {
	*x = AIFSBroadcastRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIFSBroadcastRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIFSBroadcastRecipient) ProtoMessage() {}

func (x *AIFSBroadcastRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIFSBroadcastRecipient.ProtoReflect.Descriptor instead.
func (*AIFSBroadcastRecipient) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{11}
}

func (x *AIFSBroadcastRecipient) GetRecipient() []*BroadcastRecipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *AIFSBroadcastRecipient) GetAifsId() int64 {
	if x != nil {
		return x.AifsId
	}
	return 0
}

type BroadcastRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastRecipientsId int64                  `protobuf:"varint,1,opt,name=broadcast_recipients_id,json=broadcastRecipientsId,proto3" json:"broadcast_recipients_id,omitempty"`
	Recipient             *User                  `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Acknowledged          bool                   `protobuf:"varint,3,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	Rejected              bool                   `protobuf:"varint,4,opt,name=rejected,proto3" json:"rejected,omitempty"`
	LastReplied           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_replied,json=lastReplied,proto3" json:"last_replied,omitempty"`
	AifsId                int64                  `protobuf:"varint,6,opt,name=aifs_id,json=aifsId,proto3" json:"aifs_id,omitempty"`
}

func (x *BroadcastRecipient) Reset() {
	*x = BroadcastRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastRecipient) ProtoMessage() {}

func (x *BroadcastRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastRecipient.ProtoReflect.Descriptor instead.
func (*BroadcastRecipient) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{12}
}

func (x *BroadcastRecipient) GetBroadcastRecipientsId() int64 {
	if x != nil {
		return x.BroadcastRecipientsId
	}
	return 0
}

func (x *BroadcastRecipient) GetRecipient() *User {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *BroadcastRecipient) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

func (x *BroadcastRecipient) GetRejected() bool {
	if x != nil {
		return x.Rejected
	}
	return false
}

func (x *BroadcastRecipient) GetLastReplied() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReplied
	}
	return nil
}

func (x *BroadcastRecipient) GetAifsId() int64 {
	if x != nil {
		return x.AifsId
	}
	return 0
}

// Passing around multiple broadcasts in one message.
type BroadcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response  *Response  `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Broadcast *Broadcast `protobuf:"bytes,2,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
}

func (x *BroadcastResponse) Reset() {
	*x = BroadcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastResponse) ProtoMessage() {}

func (x *BroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastResponse.ProtoReflect.Descriptor instead.
func (*BroadcastResponse) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{13}
}

func (x *BroadcastResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BroadcastResponse) GetBroadcast() *Broadcast {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

// Filter the types of broadcasts to be returned.
type BroadcastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       BroadcastFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.BroadcastFilter_Field" json:"field,omitempty"`
	Comparisons *Filter               `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *BroadcastFilter) Reset() {
	*x = BroadcastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastFilter) ProtoMessage() {}

func (x *BroadcastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastFilter.ProtoReflect.Descriptor instead.
func (*BroadcastFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{14}
}

func (x *BroadcastFilter) GetField() BroadcastFilter_Field {
	if x != nil {
		return x.Field
	}
	return BroadcastFilter_BROADCAST_ID
}

func (x *BroadcastFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types users as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 10 will be used if the field is empty.
type BroadcastQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*BroadcastFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 5 objects should be shown, limit = 5;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip n rows from the database
	Skip int64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Order the queries, by default the order is desc by creation date
	OrderBy *OrderByBroadcast `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *BroadcastQuery) Reset() {
	*x = BroadcastQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastQuery) ProtoMessage() {}

func (x *BroadcastQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastQuery.ProtoReflect.Descriptor instead.
func (*BroadcastQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{15}
}

func (x *BroadcastQuery) GetFilters() []*BroadcastFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BroadcastQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BroadcastQuery) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *BroadcastQuery) GetOrderBy() *OrderByBroadcast {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type OrderByBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   BroadcastFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.BroadcastFilter_Field" json:"field,omitempty"`
	OrderBy OrderBy               `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=operations_ecosys.OrderBy" json:"order_by,omitempty"`
}

func (x *OrderByBroadcast) Reset() {
	*x = OrderByBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByBroadcast) ProtoMessage() {}

func (x *OrderByBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByBroadcast.ProtoReflect.Descriptor instead.
func (*OrderByBroadcast) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{16}
}

func (x *OrderByBroadcast) GetField() BroadcastFilter_Field {
	if x != nil {
		return x.Field
	}
	return BroadcastFilter_BROADCAST_ID
}

func (x *OrderByBroadcast) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ASC
}

// The default fields of a roster
type Roster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roster IDs are only useful for the backend database.
	RosteringId   int64                `protobuf:"varint,1,opt,name=rostering_id,json=rosteringId,proto3" json:"rostering_id,omitempty"`
	AifsId        int64                `protobuf:"varint,2,opt,name=aifs_id,json=aifsId,proto3" json:"aifs_id,omitempty"`
	StartTime     string               `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       string               `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Clients       []*AIFSClientRoster  `protobuf:"bytes,5,rep,name=clients,proto3" json:"clients,omitempty"`
	GuardAssigned []*RosterAssignement `protobuf:"bytes,6,rep,name=guard_assigned,json=guardAssigned,proto3" json:"guard_assigned,omitempty"`
	// The roster is not actually in the database
	Status Roster_Status `protobuf:"varint,7,opt,name=status,proto3,enum=operations_ecosys.Roster_Status" json:"status,omitempty"`
}

func (x *Roster) Reset() {
	*x = Roster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roster) ProtoMessage() {}

func (x *Roster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roster.ProtoReflect.Descriptor instead.
func (*Roster) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{17}
}

func (x *Roster) GetRosteringId() int64 {
	if x != nil {
		return x.RosteringId
	}
	return 0
}

func (x *Roster) GetAifsId() int64 {
	if x != nil {
		return x.AifsId
	}
	return 0
}

func (x *Roster) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Roster) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Roster) GetClients() []*AIFSClientRoster {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *Roster) GetGuardAssigned() []*RosterAssignement {
	if x != nil {
		return x.GuardAssigned
	}
	return nil
}

func (x *Roster) GetStatus() Roster_Status {
	if x != nil {
		return x.Status
	}
	return Roster_IS_DEFAULT
}

type AIFSClientRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AifsClientRosterId int64   `protobuf:"varint,1,opt,name=aifs_client_roster_id,json=aifsClientRosterId,proto3" json:"aifs_client_roster_id,omitempty"`
	Client             *Client `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	PatrolOrder        int64   `protobuf:"varint,3,opt,name=patrol_order,json=patrolOrder,proto3" json:"patrol_order,omitempty"`
}

func (x *AIFSClientRoster) Reset() {
	*x = AIFSClientRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIFSClientRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIFSClientRoster) ProtoMessage() {}

func (x *AIFSClientRoster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIFSClientRoster.ProtoReflect.Descriptor instead.
func (*AIFSClientRoster) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{18}
}

func (x *AIFSClientRoster) GetAifsClientRosterId() int64 {
	if x != nil {
		return x.AifsClientRosterId
	}
	return 0
}

func (x *AIFSClientRoster) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *AIFSClientRoster) GetPatrolOrder() int64 {
	if x != nil {
		return x.PatrolOrder
	}
	return 0
}

type RosterAssignement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RosterAssignmentId int64 `protobuf:"varint,1,opt,name=roster_assignment_id,json=rosterAssignmentId,proto3" json:"roster_assignment_id,omitempty"`
	// The whole user fields does not need to be filled,
	// as long as the user is identifiable.
	GuardAssigned   *EmployeeEvaluation    `protobuf:"bytes,2,opt,name=guard_assigned,json=guardAssigned,proto3" json:"guard_assigned,omitempty"`
	CustomStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=custom_start_time,json=customStartTime,proto3" json:"custom_start_time,omitempty"`
	CustomEndTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=custom_end_time,json=customEndTime,proto3" json:"custom_end_time,omitempty"`
	Confirmed       bool                   `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Attended        bool                   `protobuf:"varint,6,opt,name=attended,proto3" json:"attended,omitempty"`
	AttendanceTime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=attendance_time,json=attendanceTime,proto3" json:"attendance_time,omitempty"`
	// If the assignment is part of the current assignment
	// or if it was previously assigned and is now removed
	IsAssigned bool `protobuf:"varint,8,opt,name=is_assigned,json=isAssigned,proto3" json:"is_assigned,omitempty"`
	Rejected   bool `protobuf:"varint,9,opt,name=rejected,proto3" json:"rejected,omitempty"`
}

func (x *RosterAssignement) Reset() {
	*x = RosterAssignement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterAssignement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterAssignement) ProtoMessage() {}

func (x *RosterAssignement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterAssignement.ProtoReflect.Descriptor instead.
func (*RosterAssignement) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{19}
}

func (x *RosterAssignement) GetRosterAssignmentId() int64 {
	if x != nil {
		return x.RosterAssignmentId
	}
	return 0
}

func (x *RosterAssignement) GetGuardAssigned() *EmployeeEvaluation {
	if x != nil {
		return x.GuardAssigned
	}
	return nil
}

func (x *RosterAssignement) GetCustomStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CustomStartTime
	}
	return nil
}

func (x *RosterAssignement) GetCustomEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CustomEndTime
	}
	return nil
}

func (x *RosterAssignement) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *RosterAssignement) GetAttended() bool {
	if x != nil {
		return x.Attended
	}
	return false
}

func (x *RosterAssignement) GetAttendanceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AttendanceTime
	}
	return nil
}

func (x *RosterAssignement) GetIsAssigned() bool {
	if x != nil {
		return x.IsAssigned
	}
	return false
}

func (x *RosterAssignement) GetRejected() bool {
	if x != nil {
		return x.Rejected
	}
	return false
}

type BulkRosters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rosters []*Roster `protobuf:"bytes,1,rep,name=rosters,proto3" json:"rosters,omitempty"`
}

func (x *BulkRosters) Reset() {
	*x = BulkRosters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkRosters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRosters) ProtoMessage() {}

func (x *BulkRosters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRosters.ProtoReflect.Descriptor instead.
func (*BulkRosters) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{20}
}

func (x *BulkRosters) GetRosters() []*Roster {
	if x != nil {
		return x.Rosters
	}
	return nil
}

// Passing around multiple broadcasts in one message.
type RosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Roster   *Roster   `protobuf:"bytes,2,opt,name=roster,proto3" json:"roster,omitempty"`
}

func (x *RosterResponse) Reset() {
	*x = RosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterResponse) ProtoMessage() {}

func (x *RosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterResponse.ProtoReflect.Descriptor instead.
func (*RosterResponse) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{21}
}

func (x *RosterResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RosterResponse) GetRoster() *Roster {
	if x != nil {
		return x.Roster
	}
	return nil
}

// Filter the types of rosters to be returned.
type RosterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       RosterFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.RosterFilter_Field" json:"field,omitempty"`
	Comparisons *Filter            `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *RosterFilter) Reset() {
	*x = RosterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterFilter) ProtoMessage() {}

func (x *RosterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterFilter.ProtoReflect.Descriptor instead.
func (*RosterFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{22}
}

func (x *RosterFilter) GetField() RosterFilter_Field {
	if x != nil {
		return x.Field
	}
	return RosterFilter_ROSTER_ID
}

func (x *RosterFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types rosters as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 10 will be used if the field is empty.
type RosterQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*RosterFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 5 objects should be shown, limit = 5;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip n rows from the database
	Skip int64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Order the queries, by default the order is desc by creation date
	OrderBy *OrderByRoster `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *RosterQuery) Reset() {
	*x = RosterQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterQuery) ProtoMessage() {}

func (x *RosterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterQuery.ProtoReflect.Descriptor instead.
func (*RosterQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{23}
}

func (x *RosterQuery) GetFilters() []*RosterFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RosterQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RosterQuery) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *RosterQuery) GetOrderBy() *OrderByRoster {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type OrderByRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   RosterFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.RosterFilter_Field" json:"field,omitempty"`
	OrderBy OrderBy            `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=operations_ecosys.OrderBy" json:"order_by,omitempty"`
}

func (x *OrderByRoster) Reset() {
	*x = OrderByRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByRoster) ProtoMessage() {}

func (x *OrderByRoster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByRoster.ProtoReflect.Descriptor instead.
func (*OrderByRoster) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{24}
}

func (x *OrderByRoster) GetField() RosterFilter_Field {
	if x != nil {
		return x.Field
	}
	return RosterFilter_ROSTER_ID
}

func (x *OrderByRoster) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ASC
}

// TODO: Find out if the user should be available
// throughout the whole duration.
type AvailabilityQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// If end time is null, the time period is taken
	// to be from the start time + 12h
	EndTime string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Limit the number of objects being returned.
	// If only 5 objects should be shown, limit = 5;
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip n rows from the database
	Skip int64 `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	// The client has no current need to fill this up.
	Filters []*AvailabilityFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	OrderBy *OrderByQuery         `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *AvailabilityQuery) Reset() {
	*x = AvailabilityQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityQuery) ProtoMessage() {}

func (x *AvailabilityQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityQuery.ProtoReflect.Descriptor instead.
func (*AvailabilityQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{25}
}

func (x *AvailabilityQuery) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AvailabilityQuery) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AvailabilityQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AvailabilityQuery) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *AvailabilityQuery) GetFilters() []*AvailabilityFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AvailabilityQuery) GetOrderBy() *OrderByQuery {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type OrderByQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   AvailabilityFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.AvailabilityFilter_Field" json:"field,omitempty"`
	OrderBy OrderBy                  `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=operations_ecosys.OrderBy" json:"order_by,omitempty"`
}

func (x *OrderByQuery) Reset() {
	*x = OrderByQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByQuery) ProtoMessage() {}

func (x *OrderByQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByQuery.ProtoReflect.Descriptor instead.
func (*OrderByQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{26}
}

func (x *OrderByQuery) GetField() AvailabilityFilter_Field {
	if x != nil {
		return x.Field
	}
	return AvailabilityFilter_AVAILABILITY_ID
}

func (x *OrderByQuery) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ASC
}

// Filter the types of availabilty to be returned.
type AvailabilityFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       AvailabilityFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.AvailabilityFilter_Field" json:"field,omitempty"`
	Comparisons *Filter                  `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *AvailabilityFilter) Reset() {
	*x = AvailabilityFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityFilter) ProtoMessage() {}

func (x *AvailabilityFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityFilter.ProtoReflect.Descriptor instead.
func (*AvailabilityFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{27}
}

func (x *AvailabilityFilter) GetField() AvailabilityFilter_Field {
	if x != nil {
		return x.Field
	}
	return AvailabilityFilter_AVAILABILITY_ID
}

func (x *AvailabilityFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

//**************************************************************************
//                ROSTERING EMPLOYEE EVALUATION MESSAGES                    *
//**************************************************************************
type EmployeeEvaluationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Employee *EmployeeEvaluation `protobuf:"bytes,2,opt,name=employee,proto3" json:"employee,omitempty"`
}

func (x *EmployeeEvaluationResponse) Reset() {
	*x = EmployeeEvaluationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeEvaluationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeEvaluationResponse) ProtoMessage() {}

func (x *EmployeeEvaluationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeEvaluationResponse.ProtoReflect.Descriptor instead.
func (*EmployeeEvaluationResponse) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{28}
}

func (x *EmployeeEvaluationResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *EmployeeEvaluationResponse) GetEmployee() *EmployeeEvaluation {
	if x != nil {
		return x.Employee
	}
	return nil
}

type EmployeeEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employee      *User   `protobuf:"bytes,1,opt,name=employee,proto3" json:"employee,omitempty"`
	EmployeeScore float32 `protobuf:"fixed32,2,opt,name=employee_score,json=employeeScore,proto3" json:"employee_score,omitempty"`
	// This is used if it is needed to determine
	// if the employee is available within a previously
	// specified time.
	IsAvailable bool `protobuf:"varint,3,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *EmployeeEvaluation) Reset() {
	*x = EmployeeEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeEvaluation) ProtoMessage() {}

func (x *EmployeeEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeEvaluation.ProtoReflect.Descriptor instead.
func (*EmployeeEvaluation) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{29}
}

func (x *EmployeeEvaluation) GetEmployee() *User {
	if x != nil {
		return x.Employee
	}
	return nil
}

func (x *EmployeeEvaluation) GetEmployeeScore() float32 {
	if x != nil {
		return x.EmployeeScore
	}
	return 0
}

func (x *EmployeeEvaluation) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

// Generic reponses to add or update requests
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Response_Type `protobuf:"varint,1,opt,name=type,proto3,enum=operations_ecosys.Response_Type" json:"type,omitempty"`
	ErrorMessage string        `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Return any pk of the row that the query modified
	PrimaryKey int64 `protobuf:"varint,3,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{30}
}

func (x *Response) GetType() Response_Type {
	if x != nil {
		return x.Type
	}
	return Response_ACK
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Response) GetPrimaryKey() int64 {
	if x != nil {
		return x.PrimaryKey
	}
	return 0
}

// This is used to indicate what kind of objects should be returned that
// fit this critera.
// For example, if one wishes to get all broadcasts that have more than
// one recipient. They might put the comparison as GREATER, value = 1;
// The field to be compared with is in the corresponding XXXFilter message.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparison Filter_Comparisons `protobuf:"varint,1,opt,name=comparison,proto3,enum=operations_ecosys.Filter_Comparisons" json:"comparison,omitempty"`
	Value      string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{31}
}

func (x *Filter) GetComparison() Filter_Comparisons {
	if x != nil {
		return x.Comparison
	}
	return Filter_GREATER
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_operations_ecosys_proto protoreflect.FileDescriptor

var file_proto_operations_ecosys_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x03, 0x22, 0x75, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0xf3, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x06, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x22, 0x7f, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x73, 0x22, 0x16, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x3b,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0xa4, 0x04, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x41, 0x49, 0x46, 0x53, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x75, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x31, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x4e, 0x4f,
	0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x0b, 0x55, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x49, 0x46, 0x53,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x69, 0x66, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x69, 0x66, 0x73, 0x49, 0x64,
	0x22, 0x9b, 0x02, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x69, 0x66, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x69, 0x66, 0x73, 0x49, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x45, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50,
	0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x49, 0x46, 0x53, 0x5f, 0x49, 0x44, 0x10,
	0x09, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x0a, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x3e,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x89,
	0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x88, 0x03, 0x0a, 0x06, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x69, 0x66, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x69, 0x66, 0x73, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x41, 0x49, 0x46, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x41, 0x49, 0x46, 0x53, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x69,
	0x66, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x69, 0x66, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0xdb, 0x03, 0x0a, 0x11, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x42, 0x0a, 0x0b, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x22, 0xbd, 0x03, 0x0a, 0x0c, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xb2,
	0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x49, 0x46, 0x53,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x49, 0x46, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x55, 0x41,
	0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x4f, 0x53, 0x54,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0c, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x11,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xa5, 0x02,
	0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x55, 0x41, 0x52, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x55, 0x45, 0x53, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48,
	0x55, 0x52, 0x53, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x09, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x53, 0x55, 0x4e, 0x10, 0x0b, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x12, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22,
	0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x53,
	0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x2a, 0x1c, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x01, 0x32, 0xe0, 0x04, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0xc1, 0x03, 0x0a, 0x11, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb9, 0x03, 0x0a,
	0x0e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_operations_ecosys_proto_rawDescOnce sync.Once
	file_proto_operations_ecosys_proto_rawDescData = file_proto_operations_ecosys_proto_rawDesc
)

func file_proto_operations_ecosys_proto_rawDescGZIP() []byte {
	file_proto_operations_ecosys_proto_rawDescOnce.Do(func() {
		file_proto_operations_ecosys_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_operations_ecosys_proto_rawDescData)
	})
	return file_proto_operations_ecosys_proto_rawDescData
}

var file_proto_operations_ecosys_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_proto_operations_ecosys_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_proto_operations_ecosys_proto_goTypes = []interface{}{
	(OrderBy)(0),                       // 0: operations_ecosys.OrderBy
	(User_UserType)(0),                 // 1: operations_ecosys.User.UserType
	(UserFilter_Field)(0),              // 2: operations_ecosys.UserFilter.Field
	(ClientFilter_Field)(0),            // 3: operations_ecosys.ClientFilter.Field
	(Broadcast_BroadcastType)(0),       // 4: operations_ecosys.Broadcast.BroadcastType
	(Broadcast_UrgencyType)(0),         // 5: operations_ecosys.Broadcast.UrgencyType
	(BroadcastFilter_Field)(0),         // 6: operations_ecosys.BroadcastFilter.Field
	(Roster_Status)(0),                 // 7: operations_ecosys.Roster.Status
	(RosterFilter_Field)(0),            // 8: operations_ecosys.RosterFilter.Field
	(AvailabilityFilter_Field)(0),      // 9: operations_ecosys.AvailabilityFilter.Field
	(Response_Type)(0),                 // 10: operations_ecosys.Response.Type
	(Filter_Comparisons)(0),            // 11: operations_ecosys.Filter.Comparisons
	(*User)(nil),                       // 12: operations_ecosys.User
	(*UsersResponse)(nil),              // 13: operations_ecosys.UsersResponse
	(*UserFilter)(nil),                 // 14: operations_ecosys.UserFilter
	(*UserQuery)(nil),                  // 15: operations_ecosys.UserQuery
	(*OrderByUser)(nil),                // 16: operations_ecosys.OrderByUser
	(*Client)(nil),                     // 17: operations_ecosys.Client
	(*ClientResponse)(nil),             // 18: operations_ecosys.ClientResponse
	(*ClientFilter)(nil),               // 19: operations_ecosys.ClientFilter
	(*ClientQuery)(nil),                // 20: operations_ecosys.ClientQuery
	(*OrderByClient)(nil),              // 21: operations_ecosys.OrderByClient
	(*Broadcast)(nil),                  // 22: operations_ecosys.Broadcast
	(*AIFSBroadcastRecipient)(nil),     // 23: operations_ecosys.AIFSBroadcastRecipient
	(*BroadcastRecipient)(nil),         // 24: operations_ecosys.BroadcastRecipient
	(*BroadcastResponse)(nil),          // 25: operations_ecosys.BroadcastResponse
	(*BroadcastFilter)(nil),            // 26: operations_ecosys.BroadcastFilter
	(*BroadcastQuery)(nil),             // 27: operations_ecosys.BroadcastQuery
	(*OrderByBroadcast)(nil),           // 28: operations_ecosys.OrderByBroadcast
	(*Roster)(nil),                     // 29: operations_ecosys.Roster
	(*AIFSClientRoster)(nil),           // 30: operations_ecosys.AIFSClientRoster
	(*RosterAssignement)(nil),          // 31: operations_ecosys.RosterAssignement
	(*BulkRosters)(nil),                // 32: operations_ecosys.BulkRosters
	(*RosterResponse)(nil),             // 33: operations_ecosys.RosterResponse
	(*RosterFilter)(nil),               // 34: operations_ecosys.RosterFilter
	(*RosterQuery)(nil),                // 35: operations_ecosys.RosterQuery
	(*OrderByRoster)(nil),              // 36: operations_ecosys.OrderByRoster
	(*AvailabilityQuery)(nil),          // 37: operations_ecosys.AvailabilityQuery
	(*OrderByQuery)(nil),               // 38: operations_ecosys.OrderByQuery
	(*AvailabilityFilter)(nil),         // 39: operations_ecosys.AvailabilityFilter
	(*EmployeeEvaluationResponse)(nil), // 40: operations_ecosys.EmployeeEvaluationResponse
	(*EmployeeEvaluation)(nil),         // 41: operations_ecosys.EmployeeEvaluation
	(*Response)(nil),                   // 42: operations_ecosys.Response
	(*Filter)(nil),                     // 43: operations_ecosys.Filter
	(*timestamppb.Timestamp)(nil),      // 44: google.protobuf.Timestamp
}
var file_proto_operations_ecosys_proto_depIdxs = []int32{
	1,  // 0: operations_ecosys.User.user_type:type_name -> operations_ecosys.User.UserType
	42, // 1: operations_ecosys.UsersResponse.response:type_name -> operations_ecosys.Response
	12, // 2: operations_ecosys.UsersResponse.user:type_name -> operations_ecosys.User
	2,  // 3: operations_ecosys.UserFilter.field:type_name -> operations_ecosys.UserFilter.Field
	43, // 4: operations_ecosys.UserFilter.comparisons:type_name -> operations_ecosys.Filter
	14, // 5: operations_ecosys.UserQuery.filters:type_name -> operations_ecosys.UserFilter
	16, // 6: operations_ecosys.UserQuery.order_by:type_name -> operations_ecosys.OrderByUser
	2,  // 7: operations_ecosys.OrderByUser.field:type_name -> operations_ecosys.UserFilter.Field
	0,  // 8: operations_ecosys.OrderByUser.order_by:type_name -> operations_ecosys.OrderBy
	42, // 9: operations_ecosys.ClientResponse.response:type_name -> operations_ecosys.Response
	17, // 10: operations_ecosys.ClientResponse.client:type_name -> operations_ecosys.Client
	3,  // 11: operations_ecosys.ClientFilter.field:type_name -> operations_ecosys.ClientFilter.Field
	43, // 12: operations_ecosys.ClientFilter.comparisons:type_name -> operations_ecosys.Filter
	19, // 13: operations_ecosys.ClientQuery.filters:type_name -> operations_ecosys.ClientFilter
	21, // 14: operations_ecosys.ClientQuery.order_by:type_name -> operations_ecosys.OrderByClient
	3,  // 15: operations_ecosys.OrderByClient.field:type_name -> operations_ecosys.ClientFilter.Field
	0,  // 16: operations_ecosys.OrderByClient.order_by:type_name -> operations_ecosys.OrderBy
	4,  // 17: operations_ecosys.Broadcast.type:type_name -> operations_ecosys.Broadcast.BroadcastType
	44, // 18: operations_ecosys.Broadcast.creation_date:type_name -> google.protobuf.Timestamp
	44, // 19: operations_ecosys.Broadcast.deadline:type_name -> google.protobuf.Timestamp
	12, // 20: operations_ecosys.Broadcast.creator:type_name -> operations_ecosys.User
	23, // 21: operations_ecosys.Broadcast.recipients:type_name -> operations_ecosys.AIFSBroadcastRecipient
	5,  // 22: operations_ecosys.Broadcast.urgency:type_name -> operations_ecosys.Broadcast.UrgencyType
	24, // 23: operations_ecosys.AIFSBroadcastRecipient.recipient:type_name -> operations_ecosys.BroadcastRecipient
	12, // 24: operations_ecosys.BroadcastRecipient.recipient:type_name -> operations_ecosys.User
	44, // 25: operations_ecosys.BroadcastRecipient.last_replied:type_name -> google.protobuf.Timestamp
	42, // 26: operations_ecosys.BroadcastResponse.response:type_name -> operations_ecosys.Response
	22, // 27: operations_ecosys.BroadcastResponse.broadcast:type_name -> operations_ecosys.Broadcast
	6,  // 28: operations_ecosys.BroadcastFilter.field:type_name -> operations_ecosys.BroadcastFilter.Field
	43, // 29: operations_ecosys.BroadcastFilter.comparisons:type_name -> operations_ecosys.Filter
	26, // 30: operations_ecosys.BroadcastQuery.filters:type_name -> operations_ecosys.BroadcastFilter
	28, // 31: operations_ecosys.BroadcastQuery.order_by:type_name -> operations_ecosys.OrderByBroadcast
	6,  // 32: operations_ecosys.OrderByBroadcast.field:type_name -> operations_ecosys.BroadcastFilter.Field
	0,  // 33: operations_ecosys.OrderByBroadcast.order_by:type_name -> operations_ecosys.OrderBy
	30, // 34: operations_ecosys.Roster.clients:type_name -> operations_ecosys.AIFSClientRoster
	31, // 35: operations_ecosys.Roster.guard_assigned:type_name -> operations_ecosys.RosterAssignement
	7,  // 36: operations_ecosys.Roster.status:type_name -> operations_ecosys.Roster.Status
	17, // 37: operations_ecosys.AIFSClientRoster.client:type_name -> operations_ecosys.Client
	41, // 38: operations_ecosys.RosterAssignement.guard_assigned:type_name -> operations_ecosys.EmployeeEvaluation
	44, // 39: operations_ecosys.RosterAssignement.custom_start_time:type_name -> google.protobuf.Timestamp
	44, // 40: operations_ecosys.RosterAssignement.custom_end_time:type_name -> google.protobuf.Timestamp
	44, // 41: operations_ecosys.RosterAssignement.attendance_time:type_name -> google.protobuf.Timestamp
	29, // 42: operations_ecosys.BulkRosters.rosters:type_name -> operations_ecosys.Roster
	42, // 43: operations_ecosys.RosterResponse.response:type_name -> operations_ecosys.Response
	29, // 44: operations_ecosys.RosterResponse.roster:type_name -> operations_ecosys.Roster
	8,  // 45: operations_ecosys.RosterFilter.field:type_name -> operations_ecosys.RosterFilter.Field
	43, // 46: operations_ecosys.RosterFilter.comparisons:type_name -> operations_ecosys.Filter
	34, // 47: operations_ecosys.RosterQuery.filters:type_name -> operations_ecosys.RosterFilter
	36, // 48: operations_ecosys.RosterQuery.order_by:type_name -> operations_ecosys.OrderByRoster
	8,  // 49: operations_ecosys.OrderByRoster.field:type_name -> operations_ecosys.RosterFilter.Field
	0,  // 50: operations_ecosys.OrderByRoster.order_by:type_name -> operations_ecosys.OrderBy
	39, // 51: operations_ecosys.AvailabilityQuery.filters:type_name -> operations_ecosys.AvailabilityFilter
	38, // 52: operations_ecosys.AvailabilityQuery.order_by:type_name -> operations_ecosys.OrderByQuery
	9,  // 53: operations_ecosys.OrderByQuery.field:type_name -> operations_ecosys.AvailabilityFilter.Field
	0,  // 54: operations_ecosys.OrderByQuery.order_by:type_name -> operations_ecosys.OrderBy
	9,  // 55: operations_ecosys.AvailabilityFilter.field:type_name -> operations_ecosys.AvailabilityFilter.Field
	43, // 56: operations_ecosys.AvailabilityFilter.comparisons:type_name -> operations_ecosys.Filter
	42, // 57: operations_ecosys.EmployeeEvaluationResponse.response:type_name -> operations_ecosys.Response
	41, // 58: operations_ecosys.EmployeeEvaluationResponse.employee:type_name -> operations_ecosys.EmployeeEvaluation
	12, // 59: operations_ecosys.EmployeeEvaluation.employee:type_name -> operations_ecosys.User
	10, // 60: operations_ecosys.Response.type:type_name -> operations_ecosys.Response.Type
	11, // 61: operations_ecosys.Filter.comparison:type_name -> operations_ecosys.Filter.Comparisons
	12, // 62: operations_ecosys.AdminServices.AddUser:input_type -> operations_ecosys.User
	12, // 63: operations_ecosys.AdminServices.UpdateUser:input_type -> operations_ecosys.User
	12, // 64: operations_ecosys.AdminServices.DeleteUser:input_type -> operations_ecosys.User
	15, // 65: operations_ecosys.AdminServices.FindUsers:input_type -> operations_ecosys.UserQuery
	17, // 66: operations_ecosys.AdminServices.AddClient:input_type -> operations_ecosys.Client
	17, // 67: operations_ecosys.AdminServices.UpdateClient:input_type -> operations_ecosys.Client
	17, // 68: operations_ecosys.AdminServices.DeleteClient:input_type -> operations_ecosys.Client
	20, // 69: operations_ecosys.AdminServices.FindClients:input_type -> operations_ecosys.ClientQuery
	22, // 70: operations_ecosys.BroadcastServices.AddBroadcast:input_type -> operations_ecosys.Broadcast
	22, // 71: operations_ecosys.BroadcastServices.UpdateBroadcast:input_type -> operations_ecosys.Broadcast
	22, // 72: operations_ecosys.BroadcastServices.DeleteBroadcast:input_type -> operations_ecosys.Broadcast
	27, // 73: operations_ecosys.BroadcastServices.FindBroadcasts:input_type -> operations_ecosys.BroadcastQuery
	24, // 74: operations_ecosys.BroadcastServices.UpdateBroadcastRecipient:input_type -> operations_ecosys.BroadcastRecipient
	32, // 75: operations_ecosys.RosterServices.AddRoster:input_type -> operations_ecosys.BulkRosters
	32, // 76: operations_ecosys.RosterServices.UpdateRoster:input_type -> operations_ecosys.BulkRosters
	29, // 77: operations_ecosys.RosterServices.DeleteRoster:input_type -> operations_ecosys.Roster
	35, // 78: operations_ecosys.RosterServices.FindRosters:input_type -> operations_ecosys.RosterQuery
	37, // 79: operations_ecosys.RosterServices.GetAvailableUsers:input_type -> operations_ecosys.AvailabilityQuery
	42, // 80: operations_ecosys.AdminServices.AddUser:output_type -> operations_ecosys.Response
	42, // 81: operations_ecosys.AdminServices.UpdateUser:output_type -> operations_ecosys.Response
	42, // 82: operations_ecosys.AdminServices.DeleteUser:output_type -> operations_ecosys.Response
	13, // 83: operations_ecosys.AdminServices.FindUsers:output_type -> operations_ecosys.UsersResponse
	42, // 84: operations_ecosys.AdminServices.AddClient:output_type -> operations_ecosys.Response
	42, // 85: operations_ecosys.AdminServices.UpdateClient:output_type -> operations_ecosys.Response
	42, // 86: operations_ecosys.AdminServices.DeleteClient:output_type -> operations_ecosys.Response
	18, // 87: operations_ecosys.AdminServices.FindClients:output_type -> operations_ecosys.ClientResponse
	42, // 88: operations_ecosys.BroadcastServices.AddBroadcast:output_type -> operations_ecosys.Response
	42, // 89: operations_ecosys.BroadcastServices.UpdateBroadcast:output_type -> operations_ecosys.Response
	42, // 90: operations_ecosys.BroadcastServices.DeleteBroadcast:output_type -> operations_ecosys.Response
	25, // 91: operations_ecosys.BroadcastServices.FindBroadcasts:output_type -> operations_ecosys.BroadcastResponse
	42, // 92: operations_ecosys.BroadcastServices.UpdateBroadcastRecipient:output_type -> operations_ecosys.Response
	42, // 93: operations_ecosys.RosterServices.AddRoster:output_type -> operations_ecosys.Response
	42, // 94: operations_ecosys.RosterServices.UpdateRoster:output_type -> operations_ecosys.Response
	42, // 95: operations_ecosys.RosterServices.DeleteRoster:output_type -> operations_ecosys.Response
	33, // 96: operations_ecosys.RosterServices.FindRosters:output_type -> operations_ecosys.RosterResponse
	40, // 97: operations_ecosys.RosterServices.GetAvailableUsers:output_type -> operations_ecosys.EmployeeEvaluationResponse
	80, // [80:98] is the sub-list for method output_type
	62, // [62:80] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_proto_operations_ecosys_proto_init() }
func file_proto_operations_ecosys_proto_init() {
	if File_proto_operations_ecosys_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_operations_ecosys_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIFSBroadcastRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIFSClientRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterAssignement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkRosters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeEvaluationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_operations_ecosys_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_operations_ecosys_proto_goTypes,
		DependencyIndexes: file_proto_operations_ecosys_proto_depIdxs,
		EnumInfos:         file_proto_operations_ecosys_proto_enumTypes,
		MessageInfos:      file_proto_operations_ecosys_proto_msgTypes,
	}.Build()
	File_proto_operations_ecosys_proto = out.File
	file_proto_operations_ecosys_proto_rawDesc = nil
	file_proto_operations_ecosys_proto_goTypes = nil
	file_proto_operations_ecosys_proto_depIdxs = nil
}
