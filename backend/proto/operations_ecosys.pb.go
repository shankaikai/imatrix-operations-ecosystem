// Showcasing the capabilities of protobuf with gRPC

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: proto/operations_ecosys.proto

package operations_ecosys

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_UserType int32

const (
	User_ISPECIALIST    User_UserType = 0
	User_SECURITY_GUARD User_UserType = 1
	User_CONTROLLER     User_UserType = 2
	User_MANAGER        User_UserType = 3
)

// Enum value maps for User_UserType.
var (
	User_UserType_name = map[int32]string{
		0: "ISPECIALIST",
		1: "SECURITY_GUARD",
		2: "CONTROLLER",
		3: "MANAGER",
	}
	User_UserType_value = map[string]int32{
		"ISPECIALIST":    0,
		"SECURITY_GUARD": 1,
		"CONTROLLER":     2,
		"MANAGER":        3,
	}
)

func (x User_UserType) Enum() *User_UserType {
	p := new(User_UserType)
	*p = x
	return p
}

func (x User_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[0].Descriptor()
}

func (User_UserType) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[0]
}

func (x User_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_UserType.Descriptor instead.
func (User_UserType) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{0, 0}
}

// More fields can be added in the future.
type UserFilter_Field int32

const (
	UserFilter_USER_ID         UserFilter_Field = 0
	UserFilter_TYPE            UserFilter_Field = 1
	UserFilter_NAME            UserFilter_Field = 2
	UserFilter_EMAIL           UserFilter_Field = 3
	UserFilter_PHONE_NUMBER    UserFilter_Field = 4
	UserFilter_TELEGRAM_HANDLE UserFilter_Field = 5
	UserFilter_IS_PART_TIMER   UserFilter_Field = 6
)

// Enum value maps for UserFilter_Field.
var (
	UserFilter_Field_name = map[int32]string{
		0: "USER_ID",
		1: "TYPE",
		2: "NAME",
		3: "EMAIL",
		4: "PHONE_NUMBER",
		5: "TELEGRAM_HANDLE",
		6: "IS_PART_TIMER",
	}
	UserFilter_Field_value = map[string]int32{
		"USER_ID":         0,
		"TYPE":            1,
		"NAME":            2,
		"EMAIL":           3,
		"PHONE_NUMBER":    4,
		"TELEGRAM_HANDLE": 5,
		"IS_PART_TIMER":   6,
	}
)

func (x UserFilter_Field) Enum() *UserFilter_Field {
	p := new(UserFilter_Field)
	*p = x
	return p
}

func (x UserFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[1].Descriptor()
}

func (UserFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[1]
}

func (x UserFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserFilter_Field.Descriptor instead.
func (UserFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{2, 0}
}

type Broadcast_BroadcastType int32

const (
	Broadcast_ANNOUNCEMENT Broadcast_BroadcastType = 0
	Broadcast_ASSIGNMENT   Broadcast_BroadcastType = 1
)

// Enum value maps for Broadcast_BroadcastType.
var (
	Broadcast_BroadcastType_name = map[int32]string{
		0: "ANNOUNCEMENT",
		1: "ASSIGNMENT",
	}
	Broadcast_BroadcastType_value = map[string]int32{
		"ANNOUNCEMENT": 0,
		"ASSIGNMENT":   1,
	}
)

func (x Broadcast_BroadcastType) Enum() *Broadcast_BroadcastType {
	p := new(Broadcast_BroadcastType)
	*p = x
	return p
}

func (x Broadcast_BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Broadcast_BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[2].Descriptor()
}

func (Broadcast_BroadcastType) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[2]
}

func (x Broadcast_BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Broadcast_BroadcastType.Descriptor instead.
func (Broadcast_BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{4, 0}
}

// More fields can be added in the future.
type BroadcastFilter_Field int32

const (
	BroadcastFilter_BROADCAST_ID    BroadcastFilter_Field = 0
	BroadcastFilter_TYPE            BroadcastFilter_Field = 1
	BroadcastFilter_TITLE           BroadcastFilter_Field = 2
	BroadcastFilter_CONTENT         BroadcastFilter_Field = 3
	BroadcastFilter_CREATION_DATE   BroadcastFilter_Field = 4
	BroadcastFilter_DEADLINE        BroadcastFilter_Field = 5
	BroadcastFilter_CREATOR         BroadcastFilter_Field = 6
	BroadcastFilter_RECEIPEIENTS    BroadcastFilter_Field = 7
	BroadcastFilter_NUM_RECEIPIENTS BroadcastFilter_Field = 8
)

// Enum value maps for BroadcastFilter_Field.
var (
	BroadcastFilter_Field_name = map[int32]string{
		0: "BROADCAST_ID",
		1: "TYPE",
		2: "TITLE",
		3: "CONTENT",
		4: "CREATION_DATE",
		5: "DEADLINE",
		6: "CREATOR",
		7: "RECEIPEIENTS",
		8: "NUM_RECEIPIENTS",
	}
	BroadcastFilter_Field_value = map[string]int32{
		"BROADCAST_ID":    0,
		"TYPE":            1,
		"TITLE":           2,
		"CONTENT":         3,
		"CREATION_DATE":   4,
		"DEADLINE":        5,
		"CREATOR":         6,
		"RECEIPEIENTS":    7,
		"NUM_RECEIPIENTS": 8,
	}
)

func (x BroadcastFilter_Field) Enum() *BroadcastFilter_Field {
	p := new(BroadcastFilter_Field)
	*p = x
	return p
}

func (x BroadcastFilter_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastFilter_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[3].Descriptor()
}

func (BroadcastFilter_Field) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[3]
}

func (x BroadcastFilter_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastFilter_Field.Descriptor instead.
func (BroadcastFilter_Field) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{6, 0}
}

type Response_Type int32

const (
	Response_ACK   Response_Type = 0
	Response_ERROR Response_Type = 1
)

// Enum value maps for Response_Type.
var (
	Response_Type_name = map[int32]string{
		0: "ACK",
		1: "ERROR",
	}
	Response_Type_value = map[string]int32{
		"ACK":   0,
		"ERROR": 1,
	}
)

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[4].Descriptor()
}

func (Response_Type) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[4]
}

func (x Response_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Type.Descriptor instead.
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{8, 0}
}

type Filter_Comparisons int32

const (
	Filter_GREATER    Filter_Comparisons = 0
	Filter_GREATER_EQ Filter_Comparisons = 1
	Filter_EQUAL      Filter_Comparisons = 2
	Filter_LESSER_EQ  Filter_Comparisons = 3
	Filter_LESSER     Filter_Comparisons = 4
	Filter_CONTAINS   Filter_Comparisons = 5
)

// Enum value maps for Filter_Comparisons.
var (
	Filter_Comparisons_name = map[int32]string{
		0: "GREATER",
		1: "GREATER_EQ",
		2: "EQUAL",
		3: "LESSER_EQ",
		4: "LESSER",
		5: "CONTAINS",
	}
	Filter_Comparisons_value = map[string]int32{
		"GREATER":    0,
		"GREATER_EQ": 1,
		"EQUAL":      2,
		"LESSER_EQ":  3,
		"LESSER":     4,
		"CONTAINS":   5,
	}
)

func (x Filter_Comparisons) Enum() *Filter_Comparisons {
	p := new(Filter_Comparisons)
	*p = x
	return p
}

func (x Filter_Comparisons) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Comparisons) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_operations_ecosys_proto_enumTypes[5].Descriptor()
}

func (Filter_Comparisons) Type() protoreflect.EnumType {
	return &file_proto_operations_ecosys_proto_enumTypes[5]
}

func (x Filter_Comparisons) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Comparisons.Descriptor instead.
func (Filter_Comparisons) EnumDescriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{9, 0}
}

// Admin
// Users
// All users who use the operations ecosystem.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserType        User_UserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=operations_ecosys.User_UserType" json:"user_type,omitempty"`
	Name            string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Email           string        `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber     string        `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TelegramHandle  string        `protobuf:"bytes,6,opt,name=telegram_handle,json=telegramHandle,proto3" json:"telegram_handle,omitempty"`
	UserSecurityImg string        `protobuf:"bytes,7,opt,name=user_security_img,json=userSecurityImg,proto3" json:"user_security_img,omitempty"`
	IsPartTimer     bool          `protobuf:"varint,8,opt,name=is_part_timer,json=isPartTimer,proto3" json:"is_part_timer,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUserType() User_UserType {
	if x != nil {
		return x.UserType
	}
	return User_ISPECIALIST
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *User) GetTelegramHandle() string {
	if x != nil {
		return x.TelegramHandle
	}
	return ""
}

func (x *User) GetUserSecurityImg() string {
	if x != nil {
		return x.UserSecurityImg
	}
	return ""
}

func (x *User) GetIsPartTimer() bool {
	if x != nil {
		return x.IsPartTimer
	}
	return false
}

// Passing around multiple users in one message.
type BulkUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Users    []*User   `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *BulkUsers) Reset() {
	*x = BulkUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUsers) ProtoMessage() {}

func (x *BulkUsers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUsers.ProtoReflect.Descriptor instead.
func (*BulkUsers) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{1}
}

func (x *BulkUsers) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BulkUsers) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// Filter the types of broadcasts to be returned.
type UserFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       UserFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.UserFilter_Field" json:"field,omitempty"`
	Comparisons *Filter          `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *UserFilter) Reset() {
	*x = UserFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFilter) ProtoMessage() {}

func (x *UserFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFilter.ProtoReflect.Descriptor instead.
func (*UserFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{2}
}

func (x *UserFilter) GetField() UserFilter_Field {
	if x != nil {
		return x.Field
	}
	return UserFilter_USER_ID
}

func (x *UserFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types users as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 50 will be used if the field is empty.
type UserQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*UserFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 10 objects should be shown, limit = 10;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserQuery) Reset() {
	*x = UserQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuery) ProtoMessage() {}

func (x *UserQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuery.ProtoReflect.Descriptor instead.
func (*UserQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{3}
}

func (x *UserQuery) GetFilters() []*UserFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *UserQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Broadcasting
// The default fields of a broadcast
type Broadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Broadcast IDs are only useful for the backend database.
	BroadcastId  int64                   `protobuf:"varint,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	Type         Broadcast_BroadcastType `protobuf:"varint,2,opt,name=type,proto3,enum=operations_ecosys.Broadcast_BroadcastType" json:"type,omitempty"`
	Title        string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content      string                  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreationDate *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Deadline     *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// The whole user fields does not need to be filled,
	// as long as the user is identifiable.
	Creator     *User   `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	Receipients []*User `protobuf:"bytes,8,rep,name=receipients,proto3" json:"receipients,omitempty"`
}

func (x *Broadcast) Reset() {
	*x = Broadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broadcast) ProtoMessage() {}

func (x *Broadcast) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broadcast.ProtoReflect.Descriptor instead.
func (*Broadcast) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{4}
}

func (x *Broadcast) GetBroadcastId() int64 {
	if x != nil {
		return x.BroadcastId
	}
	return 0
}

func (x *Broadcast) GetType() Broadcast_BroadcastType {
	if x != nil {
		return x.Type
	}
	return Broadcast_ANNOUNCEMENT
}

func (x *Broadcast) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Broadcast) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Broadcast) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Broadcast) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Broadcast) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Broadcast) GetReceipients() []*User {
	if x != nil {
		return x.Receipients
	}
	return nil
}

// Passing around multiple broadcasts in one message.
type BulkBroadcasts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *Response    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Broadcasts []*Broadcast `protobuf:"bytes,2,rep,name=broadcasts,proto3" json:"broadcasts,omitempty"`
}

func (x *BulkBroadcasts) Reset() {
	*x = BulkBroadcasts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkBroadcasts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkBroadcasts) ProtoMessage() {}

func (x *BulkBroadcasts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkBroadcasts.ProtoReflect.Descriptor instead.
func (*BulkBroadcasts) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{5}
}

func (x *BulkBroadcasts) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BulkBroadcasts) GetBroadcasts() []*Broadcast {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

// Filter the types of broadcasts to be returned.
type BroadcastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       BroadcastFilter_Field `protobuf:"varint,1,opt,name=field,proto3,enum=operations_ecosys.BroadcastFilter_Field" json:"field,omitempty"`
	Comparisons *Filter               `protobuf:"bytes,2,opt,name=comparisons,proto3" json:"comparisons,omitempty"`
}

func (x *BroadcastFilter) Reset() {
	*x = BroadcastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastFilter) ProtoMessage() {}

func (x *BroadcastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastFilter.ProtoReflect.Descriptor instead.
func (*BroadcastFilter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{6}
}

func (x *BroadcastFilter) GetField() BroadcastFilter_Field {
	if x != nil {
		return x.Field
	}
	return BroadcastFilter_BROADCAST_ID
}

func (x *BroadcastFilter) GetComparisons() *Filter {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

// Get specific types users as specified in the Filter.
// If one wants to get all objects, leave filters empty.
// A default limit of 50 will be used if the field is empty.
type BroadcastQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*BroadcastFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Limit the number of objects being returned.
	// If only 10 objects should be shown, limit = 10;
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *BroadcastQuery) Reset() {
	*x = BroadcastQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastQuery) ProtoMessage() {}

func (x *BroadcastQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastQuery.ProtoReflect.Descriptor instead.
func (*BroadcastQuery) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{7}
}

func (x *BroadcastQuery) GetFilters() []*BroadcastFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BroadcastQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Common messages
// Generic reponses to add or update requests
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Response_Type `protobuf:"varint,1,opt,name=type,proto3,enum=operations_ecosys.Response_Type" json:"type,omitempty"`
	ErrorMessage string        `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Return any pk of the row that the query modified
	PrimaryKey int64 `protobuf:"varint,3,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{8}
}

func (x *Response) GetType() Response_Type {
	if x != nil {
		return x.Type
	}
	return Response_ACK
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Response) GetPrimaryKey() int64 {
	if x != nil {
		return x.PrimaryKey
	}
	return 0
}

// This is used to indicate what kind of objects should be returned that
// fit this critera.
// For example, if one wishes to get all broadcasts that have more than
// one recipient. They might put the comparison as GREATER, value = 1;
// The field to be compared with is in the corresponding XXXFilter message.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparison Filter_Comparisons `protobuf:"varint,1,opt,name=comparison,proto3,enum=operations_ecosys.Filter_Comparisons" json:"comparison,omitempty"`
	Value      string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_operations_ecosys_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_operations_ecosys_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_operations_ecosys_proto_rawDescGZIP(), []int{9}
}

func (x *Filter) GetComparison() Filter_Comparisons {
	if x != nil {
		return x.Comparison
	}
	return Filter_GREATER
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_operations_ecosys_proto protoreflect.FileDescriptor

var file_proto_operations_ecosys_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x03, 0x22, 0x73, 0x0a, 0x09, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xf3, 0x01,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x10, 0x06, 0x22, 0x5a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xb8, 0x03, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x4e, 0x4f,
	0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x42,
	0x75, 0x6c, 0x6b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x45, 0x49, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x50, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x22, 0x64, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa2,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x05, 0x32, 0xa9, 0x02, 0x0a, 0x0d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x09,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x32, 0xda, 0x02, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x73, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_operations_ecosys_proto_rawDescOnce sync.Once
	file_proto_operations_ecosys_proto_rawDescData = file_proto_operations_ecosys_proto_rawDesc
)

func file_proto_operations_ecosys_proto_rawDescGZIP() []byte {
	file_proto_operations_ecosys_proto_rawDescOnce.Do(func() {
		file_proto_operations_ecosys_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_operations_ecosys_proto_rawDescData)
	})
	return file_proto_operations_ecosys_proto_rawDescData
}

var file_proto_operations_ecosys_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_operations_ecosys_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_operations_ecosys_proto_goTypes = []interface{}{
	(User_UserType)(0),            // 0: operations_ecosys.User.UserType
	(UserFilter_Field)(0),         // 1: operations_ecosys.UserFilter.Field
	(Broadcast_BroadcastType)(0),  // 2: operations_ecosys.Broadcast.BroadcastType
	(BroadcastFilter_Field)(0),    // 3: operations_ecosys.BroadcastFilter.Field
	(Response_Type)(0),            // 4: operations_ecosys.Response.Type
	(Filter_Comparisons)(0),       // 5: operations_ecosys.Filter.Comparisons
	(*User)(nil),                  // 6: operations_ecosys.User
	(*BulkUsers)(nil),             // 7: operations_ecosys.BulkUsers
	(*UserFilter)(nil),            // 8: operations_ecosys.UserFilter
	(*UserQuery)(nil),             // 9: operations_ecosys.UserQuery
	(*Broadcast)(nil),             // 10: operations_ecosys.Broadcast
	(*BulkBroadcasts)(nil),        // 11: operations_ecosys.BulkBroadcasts
	(*BroadcastFilter)(nil),       // 12: operations_ecosys.BroadcastFilter
	(*BroadcastQuery)(nil),        // 13: operations_ecosys.BroadcastQuery
	(*Response)(nil),              // 14: operations_ecosys.Response
	(*Filter)(nil),                // 15: operations_ecosys.Filter
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_proto_operations_ecosys_proto_depIdxs = []int32{
	0,  // 0: operations_ecosys.User.user_type:type_name -> operations_ecosys.User.UserType
	14, // 1: operations_ecosys.BulkUsers.response:type_name -> operations_ecosys.Response
	6,  // 2: operations_ecosys.BulkUsers.users:type_name -> operations_ecosys.User
	1,  // 3: operations_ecosys.UserFilter.field:type_name -> operations_ecosys.UserFilter.Field
	15, // 4: operations_ecosys.UserFilter.comparisons:type_name -> operations_ecosys.Filter
	8,  // 5: operations_ecosys.UserQuery.filters:type_name -> operations_ecosys.UserFilter
	2,  // 6: operations_ecosys.Broadcast.type:type_name -> operations_ecosys.Broadcast.BroadcastType
	16, // 7: operations_ecosys.Broadcast.creation_date:type_name -> google.protobuf.Timestamp
	16, // 8: operations_ecosys.Broadcast.deadline:type_name -> google.protobuf.Timestamp
	6,  // 9: operations_ecosys.Broadcast.creator:type_name -> operations_ecosys.User
	6,  // 10: operations_ecosys.Broadcast.receipients:type_name -> operations_ecosys.User
	14, // 11: operations_ecosys.BulkBroadcasts.response:type_name -> operations_ecosys.Response
	10, // 12: operations_ecosys.BulkBroadcasts.broadcasts:type_name -> operations_ecosys.Broadcast
	3,  // 13: operations_ecosys.BroadcastFilter.field:type_name -> operations_ecosys.BroadcastFilter.Field
	15, // 14: operations_ecosys.BroadcastFilter.comparisons:type_name -> operations_ecosys.Filter
	12, // 15: operations_ecosys.BroadcastQuery.filters:type_name -> operations_ecosys.BroadcastFilter
	4,  // 16: operations_ecosys.Response.type:type_name -> operations_ecosys.Response.Type
	5,  // 17: operations_ecosys.Filter.comparison:type_name -> operations_ecosys.Filter.Comparisons
	6,  // 18: operations_ecosys.AdminServices.AddUser:input_type -> operations_ecosys.User
	6,  // 19: operations_ecosys.AdminServices.UpdateUser:input_type -> operations_ecosys.User
	6,  // 20: operations_ecosys.AdminServices.DeleteUser:input_type -> operations_ecosys.User
	9,  // 21: operations_ecosys.AdminServices.FindUsers:input_type -> operations_ecosys.UserQuery
	10, // 22: operations_ecosys.BroadcastServices.AddBroadcast:input_type -> operations_ecosys.Broadcast
	10, // 23: operations_ecosys.BroadcastServices.UpdateBroadcast:input_type -> operations_ecosys.Broadcast
	10, // 24: operations_ecosys.BroadcastServices.DeleteBroadcast:input_type -> operations_ecosys.Broadcast
	13, // 25: operations_ecosys.BroadcastServices.FindBroadcasts:input_type -> operations_ecosys.BroadcastQuery
	14, // 26: operations_ecosys.AdminServices.AddUser:output_type -> operations_ecosys.Response
	14, // 27: operations_ecosys.AdminServices.UpdateUser:output_type -> operations_ecosys.Response
	14, // 28: operations_ecosys.AdminServices.DeleteUser:output_type -> operations_ecosys.Response
	7,  // 29: operations_ecosys.AdminServices.FindUsers:output_type -> operations_ecosys.BulkUsers
	14, // 30: operations_ecosys.BroadcastServices.AddBroadcast:output_type -> operations_ecosys.Response
	14, // 31: operations_ecosys.BroadcastServices.UpdateBroadcast:output_type -> operations_ecosys.Response
	14, // 32: operations_ecosys.BroadcastServices.DeleteBroadcast:output_type -> operations_ecosys.Response
	11, // 33: operations_ecosys.BroadcastServices.FindBroadcasts:output_type -> operations_ecosys.BulkBroadcasts
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_operations_ecosys_proto_init() }
func file_proto_operations_ecosys_proto_init() {
	if File_proto_operations_ecosys_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_operations_ecosys_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkBroadcasts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_operations_ecosys_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_operations_ecosys_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_operations_ecosys_proto_goTypes,
		DependencyIndexes: file_proto_operations_ecosys_proto_depIdxs,
		EnumInfos:         file_proto_operations_ecosys_proto_enumTypes,
		MessageInfos:      file_proto_operations_ecosys_proto_msgTypes,
	}.Build()
	File_proto_operations_ecosys_proto = out.File
	file_proto_operations_ecosys_proto_rawDesc = nil
	file_proto_operations_ecosys_proto_goTypes = nil
	file_proto_operations_ecosys_proto_depIdxs = nil
}
