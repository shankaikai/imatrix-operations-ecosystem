// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package operations_ecosys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IotControlPrototypeServiceClient is the client API for IotControlPrototypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IotControlPrototypeServiceClient interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the State of the Stepper.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the Stepper's state will change after every action
	// made by the Controller.
	GetGateState(ctx context.Context, in *Gate, opts ...grpc.CallOption) (IotControlPrototypeService_GetGateStateClient, error)
	SetGateState(ctx context.Context, opts ...grpc.CallOption) (IotControlPrototypeService_SetGateStateClient, error)
	GetFireAlarmState(ctx context.Context, in *FireAlarm, opts ...grpc.CallOption) (IotControlPrototypeService_GetFireAlarmStateClient, error)
	GetCpuTemp(ctx context.Context, in *CpuTemp, opts ...grpc.CallOption) (IotControlPrototypeService_GetCpuTempClient, error)
}

type iotControlPrototypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIotControlPrototypeServiceClient(cc grpc.ClientConnInterface) IotControlPrototypeServiceClient {
	return &iotControlPrototypeServiceClient{cc}
}

func (c *iotControlPrototypeServiceClient) GetGateState(ctx context.Context, in *Gate, opts ...grpc.CallOption) (IotControlPrototypeService_GetGateStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &IotControlPrototypeService_ServiceDesc.Streams[0], "/gate_prototype.IotControlPrototypeService/GetGateState", opts...)
	if err != nil {
		return nil, err
	}
	x := &iotControlPrototypeServiceGetGateStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IotControlPrototypeService_GetGateStateClient interface {
	Recv() (*GateState, error)
	grpc.ClientStream
}

type iotControlPrototypeServiceGetGateStateClient struct {
	grpc.ClientStream
}

func (x *iotControlPrototypeServiceGetGateStateClient) Recv() (*GateState, error) {
	m := new(GateState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iotControlPrototypeServiceClient) SetGateState(ctx context.Context, opts ...grpc.CallOption) (IotControlPrototypeService_SetGateStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &IotControlPrototypeService_ServiceDesc.Streams[1], "/gate_prototype.IotControlPrototypeService/SetGateState", opts...)
	if err != nil {
		return nil, err
	}
	x := &iotControlPrototypeServiceSetGateStateClient{stream}
	return x, nil
}

type IotControlPrototypeService_SetGateStateClient interface {
	Send(*GateState) error
	Recv() (*GateState, error)
	grpc.ClientStream
}

type iotControlPrototypeServiceSetGateStateClient struct {
	grpc.ClientStream
}

func (x *iotControlPrototypeServiceSetGateStateClient) Send(m *GateState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iotControlPrototypeServiceSetGateStateClient) Recv() (*GateState, error) {
	m := new(GateState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iotControlPrototypeServiceClient) GetFireAlarmState(ctx context.Context, in *FireAlarm, opts ...grpc.CallOption) (IotControlPrototypeService_GetFireAlarmStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &IotControlPrototypeService_ServiceDesc.Streams[2], "/gate_prototype.IotControlPrototypeService/GetFireAlarmState", opts...)
	if err != nil {
		return nil, err
	}
	x := &iotControlPrototypeServiceGetFireAlarmStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IotControlPrototypeService_GetFireAlarmStateClient interface {
	Recv() (*FireAlarmState, error)
	grpc.ClientStream
}

type iotControlPrototypeServiceGetFireAlarmStateClient struct {
	grpc.ClientStream
}

func (x *iotControlPrototypeServiceGetFireAlarmStateClient) Recv() (*FireAlarmState, error) {
	m := new(FireAlarmState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iotControlPrototypeServiceClient) GetCpuTemp(ctx context.Context, in *CpuTemp, opts ...grpc.CallOption) (IotControlPrototypeService_GetCpuTempClient, error) {
	stream, err := c.cc.NewStream(ctx, &IotControlPrototypeService_ServiceDesc.Streams[3], "/gate_prototype.IotControlPrototypeService/GetCpuTemp", opts...)
	if err != nil {
		return nil, err
	}
	x := &iotControlPrototypeServiceGetCpuTempClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IotControlPrototypeService_GetCpuTempClient interface {
	Recv() (*CpuTempState, error)
	grpc.ClientStream
}

type iotControlPrototypeServiceGetCpuTempClient struct {
	grpc.ClientStream
}

func (x *iotControlPrototypeServiceGetCpuTempClient) Recv() (*CpuTempState, error) {
	m := new(CpuTempState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IotControlPrototypeServiceServer is the server API for IotControlPrototypeService service.
// All implementations must embed UnimplementedIotControlPrototypeServiceServer
// for forward compatibility
type IotControlPrototypeServiceServer interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the State of the Stepper.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the Stepper's state will change after every action
	// made by the Controller.
	GetGateState(*Gate, IotControlPrototypeService_GetGateStateServer) error
	SetGateState(IotControlPrototypeService_SetGateStateServer) error
	GetFireAlarmState(*FireAlarm, IotControlPrototypeService_GetFireAlarmStateServer) error
	GetCpuTemp(*CpuTemp, IotControlPrototypeService_GetCpuTempServer) error
	mustEmbedUnimplementedIotControlPrototypeServiceServer()
}

// UnimplementedIotControlPrototypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIotControlPrototypeServiceServer struct {
}

func (UnimplementedIotControlPrototypeServiceServer) GetGateState(*Gate, IotControlPrototypeService_GetGateStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGateState not implemented")
}
func (UnimplementedIotControlPrototypeServiceServer) SetGateState(IotControlPrototypeService_SetGateStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SetGateState not implemented")
}
func (UnimplementedIotControlPrototypeServiceServer) GetFireAlarmState(*FireAlarm, IotControlPrototypeService_GetFireAlarmStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFireAlarmState not implemented")
}
func (UnimplementedIotControlPrototypeServiceServer) GetCpuTemp(*CpuTemp, IotControlPrototypeService_GetCpuTempServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCpuTemp not implemented")
}
func (UnimplementedIotControlPrototypeServiceServer) mustEmbedUnimplementedIotControlPrototypeServiceServer() {
}

// UnsafeIotControlPrototypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IotControlPrototypeServiceServer will
// result in compilation errors.
type UnsafeIotControlPrototypeServiceServer interface {
	mustEmbedUnimplementedIotControlPrototypeServiceServer()
}

func RegisterIotControlPrototypeServiceServer(s grpc.ServiceRegistrar, srv IotControlPrototypeServiceServer) {
	s.RegisterService(&IotControlPrototypeService_ServiceDesc, srv)
}

func _IotControlPrototypeService_GetGateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Gate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IotControlPrototypeServiceServer).GetGateState(m, &iotControlPrototypeServiceGetGateStateServer{stream})
}

type IotControlPrototypeService_GetGateStateServer interface {
	Send(*GateState) error
	grpc.ServerStream
}

type iotControlPrototypeServiceGetGateStateServer struct {
	grpc.ServerStream
}

func (x *iotControlPrototypeServiceGetGateStateServer) Send(m *GateState) error {
	return x.ServerStream.SendMsg(m)
}

func _IotControlPrototypeService_SetGateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IotControlPrototypeServiceServer).SetGateState(&iotControlPrototypeServiceSetGateStateServer{stream})
}

type IotControlPrototypeService_SetGateStateServer interface {
	Send(*GateState) error
	Recv() (*GateState, error)
	grpc.ServerStream
}

type iotControlPrototypeServiceSetGateStateServer struct {
	grpc.ServerStream
}

func (x *iotControlPrototypeServiceSetGateStateServer) Send(m *GateState) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iotControlPrototypeServiceSetGateStateServer) Recv() (*GateState, error) {
	m := new(GateState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IotControlPrototypeService_GetFireAlarmState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FireAlarm)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IotControlPrototypeServiceServer).GetFireAlarmState(m, &iotControlPrototypeServiceGetFireAlarmStateServer{stream})
}

type IotControlPrototypeService_GetFireAlarmStateServer interface {
	Send(*FireAlarmState) error
	grpc.ServerStream
}

type iotControlPrototypeServiceGetFireAlarmStateServer struct {
	grpc.ServerStream
}

func (x *iotControlPrototypeServiceGetFireAlarmStateServer) Send(m *FireAlarmState) error {
	return x.ServerStream.SendMsg(m)
}

func _IotControlPrototypeService_GetCpuTemp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CpuTemp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IotControlPrototypeServiceServer).GetCpuTemp(m, &iotControlPrototypeServiceGetCpuTempServer{stream})
}

type IotControlPrototypeService_GetCpuTempServer interface {
	Send(*CpuTempState) error
	grpc.ServerStream
}

type iotControlPrototypeServiceGetCpuTempServer struct {
	grpc.ServerStream
}

func (x *iotControlPrototypeServiceGetCpuTempServer) Send(m *CpuTempState) error {
	return x.ServerStream.SendMsg(m)
}

// IotControlPrototypeService_ServiceDesc is the grpc.ServiceDesc for IotControlPrototypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IotControlPrototypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gate_prototype.IotControlPrototypeService",
	HandlerType: (*IotControlPrototypeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGateState",
			Handler:       _IotControlPrototypeService_GetGateState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetGateState",
			Handler:       _IotControlPrototypeService_SetGateState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFireAlarmState",
			Handler:       _IotControlPrototypeService_GetFireAlarmState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCpuTemp",
			Handler:       _IotControlPrototypeService_GetCpuTemp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/iot_prototype.proto",
}
