// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package operations_ecosys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServicesClient is the client API for AdminServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServicesClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	FindUsers(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*BulkUsers, error)
}

type adminServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServicesClient(cc grpc.ClientConnInterface) AdminServicesClient {
	return &adminServicesClient{cc}
}

func (c *adminServicesClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.AdminServices/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServicesClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.AdminServices/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServicesClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.AdminServices/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServicesClient) FindUsers(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*BulkUsers, error) {
	out := new(BulkUsers)
	err := c.cc.Invoke(ctx, "/operations_ecosys.AdminServices/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServicesServer is the server API for AdminServices service.
// All implementations must embed UnimplementedAdminServicesServer
// for forward compatibility
type AdminServicesServer interface {
	AddUser(context.Context, *User) (*Response, error)
	UpdateUser(context.Context, *User) (*Response, error)
	DeleteUser(context.Context, *User) (*Response, error)
	FindUsers(context.Context, *UserQuery) (*BulkUsers, error)
	mustEmbedUnimplementedAdminServicesServer()
}

// UnimplementedAdminServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServicesServer struct {
}

func (UnimplementedAdminServicesServer) AddUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAdminServicesServer) UpdateUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServicesServer) DeleteUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServicesServer) FindUsers(context.Context, *UserQuery) (*BulkUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (UnimplementedAdminServicesServer) mustEmbedUnimplementedAdminServicesServer() {}

// UnsafeAdminServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServicesServer will
// result in compilation errors.
type UnsafeAdminServicesServer interface {
	mustEmbedUnimplementedAdminServicesServer()
}

func RegisterAdminServicesServer(s grpc.ServiceRegistrar, srv AdminServicesServer) {
	s.RegisterService(&AdminServices_ServiceDesc, srv)
}

func _AdminServices_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServicesServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.AdminServices/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServicesServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServices_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServicesServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.AdminServices/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServicesServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServices_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServicesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.AdminServices/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServicesServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServices_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServicesServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.AdminServices/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServicesServer).FindUsers(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminServices_ServiceDesc is the grpc.ServiceDesc for AdminServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operations_ecosys.AdminServices",
	HandlerType: (*AdminServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _AdminServices_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AdminServices_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminServices_DeleteUser_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _AdminServices_FindUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/operations_ecosys.proto",
}

// BroadcastServicesClient is the client API for BroadcastServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastServicesClient interface {
	AddBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error)
	// Note that this update does not update the broadcast's recipient's inner status
	// such as the acknowledgement or rejection status but only if the recipient
	// is part of the broadcast.
	UpdateBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error)
	DeleteBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error)
	FindBroadcasts(ctx context.Context, in *BroadcastQuery, opts ...grpc.CallOption) (*BulkBroadcasts, error)
}

type broadcastServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServicesClient(cc grpc.ClientConnInterface) BroadcastServicesClient {
	return &broadcastServicesClient{cc}
}

func (c *broadcastServicesClient) AddBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.BroadcastServices/AddBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServicesClient) UpdateBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.BroadcastServices/UpdateBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServicesClient) DeleteBroadcast(ctx context.Context, in *Broadcast, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/operations_ecosys.BroadcastServices/DeleteBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServicesClient) FindBroadcasts(ctx context.Context, in *BroadcastQuery, opts ...grpc.CallOption) (*BulkBroadcasts, error) {
	out := new(BulkBroadcasts)
	err := c.cc.Invoke(ctx, "/operations_ecosys.BroadcastServices/FindBroadcasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServicesServer is the server API for BroadcastServices service.
// All implementations must embed UnimplementedBroadcastServicesServer
// for forward compatibility
type BroadcastServicesServer interface {
	AddBroadcast(context.Context, *Broadcast) (*Response, error)
	// Note that this update does not update the broadcast's recipient's inner status
	// such as the acknowledgement or rejection status but only if the recipient
	// is part of the broadcast.
	UpdateBroadcast(context.Context, *Broadcast) (*Response, error)
	DeleteBroadcast(context.Context, *Broadcast) (*Response, error)
	FindBroadcasts(context.Context, *BroadcastQuery) (*BulkBroadcasts, error)
	mustEmbedUnimplementedBroadcastServicesServer()
}

// UnimplementedBroadcastServicesServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServicesServer struct {
}

func (UnimplementedBroadcastServicesServer) AddBroadcast(context.Context, *Broadcast) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBroadcast not implemented")
}
func (UnimplementedBroadcastServicesServer) UpdateBroadcast(context.Context, *Broadcast) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBroadcast not implemented")
}
func (UnimplementedBroadcastServicesServer) DeleteBroadcast(context.Context, *Broadcast) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBroadcast not implemented")
}
func (UnimplementedBroadcastServicesServer) FindBroadcasts(context.Context, *BroadcastQuery) (*BulkBroadcasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBroadcasts not implemented")
}
func (UnimplementedBroadcastServicesServer) mustEmbedUnimplementedBroadcastServicesServer() {}

// UnsafeBroadcastServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServicesServer will
// result in compilation errors.
type UnsafeBroadcastServicesServer interface {
	mustEmbedUnimplementedBroadcastServicesServer()
}

func RegisterBroadcastServicesServer(s grpc.ServiceRegistrar, srv BroadcastServicesServer) {
	s.RegisterService(&BroadcastServices_ServiceDesc, srv)
}

func _BroadcastServices_AddBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Broadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServicesServer).AddBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.BroadcastServices/AddBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServicesServer).AddBroadcast(ctx, req.(*Broadcast))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastServices_UpdateBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Broadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServicesServer).UpdateBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.BroadcastServices/UpdateBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServicesServer).UpdateBroadcast(ctx, req.(*Broadcast))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastServices_DeleteBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Broadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServicesServer).DeleteBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.BroadcastServices/DeleteBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServicesServer).DeleteBroadcast(ctx, req.(*Broadcast))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastServices_FindBroadcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServicesServer).FindBroadcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operations_ecosys.BroadcastServices/FindBroadcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServicesServer).FindBroadcasts(ctx, req.(*BroadcastQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadcastServices_ServiceDesc is the grpc.ServiceDesc for BroadcastServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operations_ecosys.BroadcastServices",
	HandlerType: (*BroadcastServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBroadcast",
			Handler:    _BroadcastServices_AddBroadcast_Handler,
		},
		{
			MethodName: "UpdateBroadcast",
			Handler:    _BroadcastServices_UpdateBroadcast_Handler,
		},
		{
			MethodName: "DeleteBroadcast",
			Handler:    _BroadcastServices_DeleteBroadcast_Handler,
		},
		{
			MethodName: "FindBroadcasts",
			Handler:    _BroadcastServices_FindBroadcasts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/operations_ecosys.proto",
}
