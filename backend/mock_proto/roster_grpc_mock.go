// Code generated by MockGen. DO NOT EDIT.
// Source: capstone.operations_ecosystem/backend/proto (interfaces: RosterServicesClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	operations_ecosys "capstone.operations_ecosystem/backend/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRosterServicesClient is a mock of RosterServicesClient interface.
type MockRosterServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRosterServicesClientMockRecorder
}

// MockRosterServicesClientMockRecorder is the mock recorder for MockRosterServicesClient.
type MockRosterServicesClientMockRecorder struct {
	mock *MockRosterServicesClient
}

// NewMockRosterServicesClient creates a new mock instance.
func NewMockRosterServicesClient(ctrl *gomock.Controller) *MockRosterServicesClient {
	mock := &MockRosterServicesClient{ctrl: ctrl}
	mock.recorder = &MockRosterServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRosterServicesClient) EXPECT() *MockRosterServicesClientMockRecorder {
	return m.recorder
}

// AddRoster mocks base method.
func (m *MockRosterServicesClient) AddRoster(arg0 context.Context, arg1 *operations_ecosys.BulkRosters, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRoster", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoster indicates an expected call of AddRoster.
func (mr *MockRosterServicesClientMockRecorder) AddRoster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoster", reflect.TypeOf((*MockRosterServicesClient)(nil).AddRoster), varargs...)
}

// DeleteRoster mocks base method.
func (m *MockRosterServicesClient) DeleteRoster(arg0 context.Context, arg1 *operations_ecosys.Roster, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoster", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoster indicates an expected call of DeleteRoster.
func (mr *MockRosterServicesClientMockRecorder) DeleteRoster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoster", reflect.TypeOf((*MockRosterServicesClient)(nil).DeleteRoster), varargs...)
}

// FindRosterAssignments mocks base method.
func (m *MockRosterServicesClient) FindRosterAssignments(arg0 context.Context, arg1 *operations_ecosys.RosterQuery, arg2 ...grpc.CallOption) (operations_ecosys.RosterServices_FindRosterAssignmentsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRosterAssignments", varargs...)
	ret0, _ := ret[0].(operations_ecosys.RosterServices_FindRosterAssignmentsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRosterAssignments indicates an expected call of FindRosterAssignments.
func (mr *MockRosterServicesClientMockRecorder) FindRosterAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRosterAssignments", reflect.TypeOf((*MockRosterServicesClient)(nil).FindRosterAssignments), varargs...)
}

// FindRosters mocks base method.
func (m *MockRosterServicesClient) FindRosters(arg0 context.Context, arg1 *operations_ecosys.RosterQuery, arg2 ...grpc.CallOption) (operations_ecosys.RosterServices_FindRostersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRosters", varargs...)
	ret0, _ := ret[0].(operations_ecosys.RosterServices_FindRostersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRosters indicates an expected call of FindRosters.
func (mr *MockRosterServicesClientMockRecorder) FindRosters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRosters", reflect.TypeOf((*MockRosterServicesClient)(nil).FindRosters), varargs...)
}

// GetAvailableUsers mocks base method.
func (m *MockRosterServicesClient) GetAvailableUsers(arg0 context.Context, arg1 *operations_ecosys.AvailabilityQuery, arg2 ...grpc.CallOption) (operations_ecosys.RosterServices_GetAvailableUsersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableUsers", varargs...)
	ret0, _ := ret[0].(operations_ecosys.RosterServices_GetAvailableUsersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableUsers indicates an expected call of GetAvailableUsers.
func (mr *MockRosterServicesClientMockRecorder) GetAvailableUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableUsers", reflect.TypeOf((*MockRosterServicesClient)(nil).GetAvailableUsers), varargs...)
}

// UpdateRoster mocks base method.
func (m *MockRosterServicesClient) UpdateRoster(arg0 context.Context, arg1 *operations_ecosys.BulkRosters, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoster", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoster indicates an expected call of UpdateRoster.
func (mr *MockRosterServicesClientMockRecorder) UpdateRoster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoster", reflect.TypeOf((*MockRosterServicesClient)(nil).UpdateRoster), varargs...)
}

// UpdateRosterAssignment mocks base method.
func (m *MockRosterServicesClient) UpdateRosterAssignment(arg0 context.Context, arg1 *operations_ecosys.RosterAssignement, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRosterAssignment", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRosterAssignment indicates an expected call of UpdateRosterAssignment.
func (mr *MockRosterServicesClientMockRecorder) UpdateRosterAssignment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRosterAssignment", reflect.TypeOf((*MockRosterServicesClient)(nil).UpdateRosterAssignment), varargs...)
}
