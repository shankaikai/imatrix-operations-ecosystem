// Code generated by MockGen. DO NOT EDIT.
// Source: capstone.operations_ecosystem/backend/proto (interfaces: AdminServicesClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	operations_ecosys "capstone.operations_ecosystem/backend/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAdminServicesClient is a mock of AdminServicesClient interface.
type MockAdminServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServicesClientMockRecorder
}

// MockAdminServicesClientMockRecorder is the mock recorder for MockAdminServicesClient.
type MockAdminServicesClientMockRecorder struct {
	mock *MockAdminServicesClient
}

// NewMockAdminServicesClient creates a new mock instance.
func NewMockAdminServicesClient(ctrl *gomock.Controller) *MockAdminServicesClient {
	mock := &MockAdminServicesClient{ctrl: ctrl}
	mock.recorder = &MockAdminServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServicesClient) EXPECT() *MockAdminServicesClientMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockAdminServicesClient) AddClient(arg0 context.Context, arg1 *operations_ecosys.Client, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClient", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClient indicates an expected call of AddClient.
func (mr *MockAdminServicesClientMockRecorder) AddClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockAdminServicesClient)(nil).AddClient), varargs...)
}

// AddUser mocks base method.
func (m *MockAdminServicesClient) AddUser(arg0 context.Context, arg1 *operations_ecosys.User, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAdminServicesClientMockRecorder) AddUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAdminServicesClient)(nil).AddUser), varargs...)
}

// DeleteClient mocks base method.
func (m *MockAdminServicesClient) DeleteClient(arg0 context.Context, arg1 *operations_ecosys.Client, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClient", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockAdminServicesClientMockRecorder) DeleteClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockAdminServicesClient)(nil).DeleteClient), varargs...)
}

// DeleteUser mocks base method.
func (m *MockAdminServicesClient) DeleteUser(arg0 context.Context, arg1 *operations_ecosys.User, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminServicesClientMockRecorder) DeleteUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminServicesClient)(nil).DeleteUser), varargs...)
}

// FindClients mocks base method.
func (m *MockAdminServicesClient) FindClients(arg0 context.Context, arg1 *operations_ecosys.ClientQuery, arg2 ...grpc.CallOption) (operations_ecosys.AdminServices_FindClientsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindClients", varargs...)
	ret0, _ := ret[0].(operations_ecosys.AdminServices_FindClientsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClients indicates an expected call of FindClients.
func (mr *MockAdminServicesClientMockRecorder) FindClients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClients", reflect.TypeOf((*MockAdminServicesClient)(nil).FindClients), varargs...)
}

// FindUsers mocks base method.
func (m *MockAdminServicesClient) FindUsers(arg0 context.Context, arg1 *operations_ecosys.UserQuery, arg2 ...grpc.CallOption) (operations_ecosys.AdminServices_FindUsersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUsers", varargs...)
	ret0, _ := ret[0].(operations_ecosys.AdminServices_FindUsersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockAdminServicesClientMockRecorder) FindUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockAdminServicesClient)(nil).FindUsers), varargs...)
}

// UpdateClient mocks base method.
func (m *MockAdminServicesClient) UpdateClient(arg0 context.Context, arg1 *operations_ecosys.Client, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClient", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockAdminServicesClientMockRecorder) UpdateClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockAdminServicesClient)(nil).UpdateClient), varargs...)
}

// UpdateUser mocks base method.
func (m *MockAdminServicesClient) UpdateUser(arg0 context.Context, arg1 *operations_ecosys.User, arg2 ...grpc.CallOption) (*operations_ecosys.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*operations_ecosys.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAdminServicesClientMockRecorder) UpdateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAdminServicesClient)(nil).UpdateUser), varargs...)
}
