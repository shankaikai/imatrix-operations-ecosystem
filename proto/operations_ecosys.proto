// Showcasing the capabilities of protobuf with gRPC

syntax = "proto3";
import "proto/iot_prototype.proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "/operations_ecosys";

package operations_ecosys;

// Note for updates:
// If the object fields should be updated, 
// fields that do not need to be updated can be blank.
// However, do note that enums and bools have default values, 
// hence enums and bools should always be filled. 

service AdminServices {
    // User
    rpc AddUser(FullUser) returns (Response) {}
    rpc UpdateUser(User) returns (Response) {}
    rpc DeleteUser(User) returns (Response) {}
    // TODO change user response to have user scoring and stuff
    rpc FindUsers(UserQuery) returns (stream UsersResponse) {}

    // Client
    rpc AddClient(Client) returns (Response) {}
    rpc UpdateClient(Client) returns (Response) {}
    rpc DeleteClient(Client) returns (Response) {}
    rpc FindClients(ClientQuery) returns (stream ClientResponse) {}

    // Security Related 
    rpc GetWANonce(User) returns (ResponseNonce) {}
    rpc GetSecurityString(User) returns (SecurityStringResponse) {}
    rpc AuthenticateUser(LoginRequest) returns (UserTokenResponse) {}

    //Is this user or client?
    rpc GetRegistrationCode(RegistrationCodeRequest) returns (RegistrationCodeResponse) {}
    rpc CheckRegistrationCode(RegistrationCode) returns (SecurityStringResponse) {}
}

service BroadcastServices{
    rpc AddBroadcast(Broadcast) returns (Response) {}
    // Note that this update does not update the broadcast's recipient's inner status 
    // such as the acknowledgement or rejection status but only if the recipient 
    // is part of the broadcast.
    rpc UpdateBroadcast(Broadcast) returns (Response) {}
    rpc DeleteBroadcast(Broadcast) returns (Response) {}
    rpc FindBroadcasts(BroadcastQuery) returns (stream BroadcastResponse) {}

    // Updating of broadcast recipients
    rpc UpdateBroadcastRecipient(BroadcastRecipient) returns (Response) {}
}

service RosterServices{
    // Add multiple rosters for different AIFS at the same time
    rpc AddRoster(BulkRosters) returns (Response) {}
    // Note that this update does not update the roster's guard's inner status 
    // such as the acknowledgement or attended status but only if the guard 
    // is part of the roster.
    rpc UpdateRoster(BulkRosters) returns (Response) {}
    rpc DeleteRoster(Roster) returns (Response) {}
    rpc FindRosters(RosterQuery) returns (stream RosterResponse) {}
    rpc GetAvailableUsers(AvailabilityQuery) returns (stream EmployeeEvaluationResponse) {}

    // Specifically for the roster assignments
    rpc FindRosterAssignments(RosterQuery) returns (stream RosterAssignmentResponse) {}
    // Updates the individual roster assignment
    rpc UpdateRosterAssignment(RosterAssignement) returns (Response) {}
}

service IncidentReportServices{
    rpc AddIncidentReport(IncidentReport) returns (Response) {}
    rpc UpdateIncidentReport(IncidentReport) returns (Response) {}
    rpc DeleteIncidentReport(IncidentReport) returns (Response) {}
    rpc FindIncidentReports(IncidentReportQuery) returns (stream IncidentReportResponse) {}

}

service CameraIotServices{
    rpc SetGateState(gate_prototype.GateState) returns (Response) {}
    // Continuously provides the states of the gates, fire alarms and cpu temperature
    // as well as the camera endpoints. 
    // Responses are sent only when there is a change in state
    // Upon connection, all states are sent for all locations are sent. 
    rpc GetIotState(google.protobuf.Empty) returns (stream CameraIotResponse) {}
}


// Admin
/***************************************************************************
*                              USER MESSAGES                               *
****************************************************************************/
// All users who use the operations ecosystem.
// TODO: decide if we want to have an inactive field for users
//       so that we don't need to delete users completely. 
message User {
    int64 user_id = 1;
    UserType user_type = 2;
    string name = 3;
    string email = 4;
    string phone_number = 5;
    string telegram_handle = 6;
    string user_security_img = 7;
    bool is_part_timer = 8;
    int64 tele_user_id = 9;

    enum UserType {
        ISPECIALIST = 0;
        SECURITY_GUARD = 1;
        CONTROLLER = 2;
        MANAGER = 3;
    }
}

// Passing around multiple users in one message. 
message UsersResponse {
    Response response = 1;
    User user = 2;
}

// Filter the types of users to be returned. 
message UserFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        USER_ID = 0;
        TYPE = 1;
        NAME = 2;
        EMAIL = 3;
        PHONE_NUMBER = 4;
        TELEGRAM_HANDLE = 5;
        IS_PART_TIMER = 6;
        TELEGRAM_USER_ID = 7;
    }
}

// Get specific types users as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message UserQuery {
    repeated UserFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2;

    // Skip n rows from the database
    int64 skip = 3;
    
    // Order the queries, by default the order is desc by creation date
    OrderByUser order_by = 4;
}


message OrderByUser{
    UserFilter.Field field = 1;
    OrderBy order_by = 2;
}

// This message is mostly used by the internal server
// and for the creation of new users only. 
// There should be no other reasons to pass around these 
// confidential messages.
message FullUser{
    User user = 1;
    string nonce = 2;
    string security_string = 3;
    string hashed_password = 4;
}


message RegistrationCodeRequest{
    User user = 1;
    CodeType type = 2;
    enum CodeType{
        ISPECIALIST = 0;
        SECURITYGUARD = 1;
        CONTROLLER = 2;
        MANAGER = 3;
    }
}

message RegistrationCode{
    string code = 1;
}

/***************************************************************************
*                              CLIENT MESSAGES                              *
****************************************************************************/

// All clients who hire the company to protect their compounds. 
// TODO: decide if we want to have an inactive field for clients
//       so that we don't need to delete cleints completely. 
message Client {
    int64 client_id = 1;
    string name = 2;
    string abbreviation = 3;
    string email = 4;
    string address = 5;
    int64 postal_code = 6;
    string phone_number = 7;
}

message ClientResponse {
    Response response = 1;
    Client client = 2;
}

// Filter the types of clients to be returned. 
message ClientFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        CLIENT_ID = 0;
    }
}

// Get specific types clients as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message ClientQuery {
    repeated ClientFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2;

    // Skip n rows from the database
    int64 skip = 3;
    
    // Order the queries, by default the order is desc by creation date
    OrderByClient order_by = 4;
}


message OrderByClient{
    ClientFilter.Field field = 1;
    OrderBy order_by = 2;
}

/***************************************************************************
*                          USER TOKEN MESSAGES                              *
****************************************************************************/
// Message used to provide a user token to the client
message UserToken {
    int64 user_token_id = 1;
    User user = 2;
    string token = 3;
    // Format must be in: YYYY-MM-DD HH:MM:SS
    string creation_datetime = 4;
    // Format must be in: YYYY-MM-DD HH:MM:SS
    string expiry_datetime = 5;
}

// Replies with a user token
message UserTokenResponse {
    Response response = 1;
    UserToken userToken = 2;
}


// Filter the types of clients to be returned. 
message UserTokenFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        USER_TOKEN_ID = 0;
        USER_ID = 1;
        EXPIRY = 2;
        TOKEN = 3;
    }
}

// Get specific types of user tokens as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message UserTokenQuery {
    repeated UserTokenFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2;

    // Skip n rows from the database
    int64 skip = 3;
    
    // Order the queries, by default the order is desc by creation date
    OrderByUserToken order_by = 4;
}


message OrderByUserToken{
    UserTokenFilter.Field field = 1;
    OrderBy order_by = 2;
}


/***************************************************************************
*                         REGISTRATION OTP MESSAGES                        *
****************************************************************************/
// Message used iternally to get the registration OTP from the DB
message RegistrationOTP {
    int64 registration_otp_id = 1;
    string token = 2;
    User.UserType user_type = 3;
    // Format must be in: YYYY-MM-DD HH:MM:SS
    string creation_datetime = 4;
    User creator = 5;
    bool is_used = 6;
}

// Filter the types of registration otp to be returned. 
message RegistrationOTPFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        REG_OTP_ID = 0;
        TOKEN = 1;
        USER_TYPE = 2;
        CREATION_DATE = 3;
        CREATOR_ID = 4;
        IS_USED = 5;
    }
}

// Get specific types of Registration OTP as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message RegistrationOTPQuery {
    repeated RegistrationOTPFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2;

    // Skip n rows from the database
    int64 skip = 3;
    
    // Order the queries, by default the order is desc by id
    OrderByRegistrationOTP order_by = 4;
}


message OrderByRegistrationOTP{
    RegistrationOTPFilter.Field field = 1;
    OrderBy order_by = 2;
}


/***************************************************************************
*                             SECURITY MESSAGES                            *
****************************************************************************/
// Any client that wishes to login send their hashed password to the backend  
// for authentication. 
message LoginRequest {
    // The user to login
    string user_email = 1;
    string hashed_password = 2;
}

// Used to provide nonces
message ResponseNonce {
    Response response = 1;
    string nonce = 2;
    
}

// Returns the security string that is tied to the user
message SecurityStringResponse{
    Response response = 1;
    string security_string = 2;
}

// Returns a registration code that can be used to create a new user
message RegistrationCodeResponse{
    Response response = 1;
    CodeType type = 2;
    string code = 3;

    enum CodeType{
        ISPECIALIST = 0;
        CONTROLLER = 1;
        MANAGER = 2;
    }
}

/***************************************************************************
*                          BROADCASTING MESSAGES                           *
****************************************************************************/
// The default fields of a broadcast
message Broadcast {
    // Broadcast IDs are only useful for the backend database. 
    int64 broadcast_id = 1;
    BroadcastType type = 2;
    string content = 3;
    google.protobuf.Timestamp creation_date = 4;
    google.protobuf.Timestamp deadline = 5;
    // The whole user fields does not need to be filled, 
    // as long as the user is identifiable.
    User creator = 6;
    repeated AIFSBroadcastRecipient recipients = 7;
    UrgencyType urgency = 8;
    
    enum BroadcastType{
        ANNOUNCEMENT = 0;
        ASSIGNMENT = 1;
    }

    enum UrgencyType{
        LOW = 0;
        MEDIUM = 1;
        HIGH = 2;
    }
}

message AIFSBroadcastRecipient {
    repeated BroadcastRecipient recipient =1;
    int64 aifs_id = 2;
}

message BroadcastRecipient {
    int64 broadcast_recipients_id = 1;
    User recipient = 2;
    bool acknowledged = 3;
    bool rejected = 4;
    google.protobuf.Timestamp last_replied = 5;
    int64 aifs_id = 6;
}


// Passing around multiple broadcasts in one message. 
message BroadcastResponse {
    Response response = 1;
    Broadcast broadcast = 2;
}

// Filter the types of broadcasts to be returned. 
message BroadcastFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        BROADCAST_ID = 0;
        TYPE = 1;
        CONTENT = 2;
        CREATION_DATE = 3;
        DEADLINE = 4;
        // Creator and recipient values should 
        // be the user id of these users
        CREATOR_ID = 5;
        // Note: Single recipient
        RECEIPEIENT_ID = 6;
        NUM_RECEIPIENTS = 7;
        URGENCY = 8;
        AIFS_ID = 9;
        BROADCAST_RECIPIENT_TABLE_ID = 10;
    }
}

// Get specific types users as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message BroadcastQuery {
    repeated BroadcastFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2; 
    // Skip n rows from the database
    int64 skip = 3;

    // Order the queries, by default the order is desc by creation date
    OrderByBroadcast order_by = 4;
}

message OrderByBroadcast{
    BroadcastFilter.Field field = 1;
    OrderBy order_by = 2;
}


/***************************************************************************
*                            ROSTERING MESSAGES                            *
****************************************************************************/
// The default fields of a roster
message Roster {
    // Roster IDs are only useful for the backend database. 
    int64 rostering_id = 1;
    int64 aifs_id = 2;
    // Format must be in: YYYY-MM-DD HH:MM:SS
    string start_time = 3;
    string end_time = 4;
    repeated AIFSClientRoster clients = 5;
    repeated RosterAssignement guard_assigned = 6;

    // The roster is not actually in the database
    Status status = 7;

    enum Status {
        IS_DEFAULT = 0;
        PENDING = 1;
        CONFIRMED = 2;
        REJECTED = 3;
    }
}

message AIFSClientRoster {
    int64 aifs_client_roster_id = 1;
    Client client = 2;    
    int64 patrol_order = 3;
}

message RosterAssignement {
    int64 roster_assignment_id = 1;
    // The whole user fields does not need to be filled, 
    // as long as the user is identifiable.
    EmployeeEvaluation guard_assigned = 2;
    google.protobuf.Timestamp custom_start_time = 3;
    google.protobuf.Timestamp custom_end_time = 4;
    bool confirmed = 5;
    bool attended = 6;
    google.protobuf.Timestamp attendance_time = 7;
    // If the assignment is part of the current assignment
    // or if it was previously assigned and is now removed
    bool is_assigned = 8;
    bool rejected = 9;
}

message BulkRosters{
    repeated Roster rosters = 1;
}

// Passing around multiple roster in one message. 
message RosterResponse {
    Response response = 1;
    Roster roster = 2;
}

// Passing around multiple roster assignments in one message. 
message RosterAssignmentResponse {
    Response response = 1;
    RosterAssignement roster_assignment = 2;
}

// Filter the types of rosters to be returned. 
message RosterFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        ROSTER_ID = 0;
        ROSTER_ASSIGNMENT_ID = 1;
        ROSTER_AIFS_CLIENT_ID = 2;
        AIFS_ID = 3;
        // Note: single user ID
        GUARD_ASSIGNED_ID = 4;
        // Note: single client ID
        CLIENT_ID = 5;
        GUARD_ASSIGNMENT_CONFIRMATION = 6;
        GUARD_ASSIGNMENT_ATTENDED = 7;
        START_TIME = 8;
        END_TIME = 9;
        IS_ASSIGNED = 10;
        DEFAULT_ROSTERING_DAY_OF_WEEK = 11;
        GUARD_ASSIGNMENT_REJECTION = 12;
    }
}

// Get specific types rosters as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message RosterQuery {
    repeated RosterFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2; 
    // Skip n rows from the database
    int64 skip = 3;

    // Order the queries, by default the order is desc by creation date
    OrderByRoster order_by = 4;
}

message OrderByRoster{
    RosterFilter.Field field = 1;
    OrderBy order_by = 2;
}

/***************************************************************************
*                 ROSTERING AVAILABILITY MESSAGES                          *
****************************************************************************/

// Note that this query only checks for users 
// available for the whole time between a start 
// and end time.

// TODO: Find out if the user should be available
// throughout the whole duration. 
message AvailabilityQuery {
    string start_time = 1;
    // If end time is null, the time period is taken 
    // to be from the start time + 12h
    string end_time = 2;

    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 3; 
    // Skip n rows from the database
    int64 skip = 4;

    // The client has no current need to fill this up.
    repeated AvailabilityFilter filters = 5;
    OrderByQuery order_by = 6;
}

// TODO change name
message OrderByQuery{
    AvailabilityFilter.Field field = 1;
    OrderBy order_by = 2;
}



// Filter the types of availabilty to be returned. 
message AvailabilityFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        AVAILABILITY_ID = 0;
        // Week of the year
        WEEK = 1;
        YEAR = 2;
        // Note: single user ID
        GUARD_ID = 3;

        // Day of the week to look at
        // The values for these fields in Filter comparisons
        // should be an empty string
        SUN = 4;
        MON = 5;
        TUES = 6;
        WED = 7;
        THURS = 8;
        FRI = 9;
        SAT = 10;
        NEXT_SUN = 11;
    }
}

/***************************************************************************
*                ROSTERING EMPLOYEE EVALUATION MESSAGES                    *
****************************************************************************/
message EmployeeEvaluationResponse {
    Response response = 1;
    EmployeeEvaluation employee = 2;
}

message EmployeeEvaluation {
    User employee = 1;
    float employee_score = 2;

    // This is used if it is needed to determine 
    // if the employee is available within a previously 
    // specified time.
    bool is_available = 3; 
}

/***************************************************************************
*                       INCIDENT REPORTING MESSAGES                         *
****************************************************************************/
// The default fields of an incident report
message IncidentReport {
    // Report IDs are only useful for the backend database. 
    int64 incident_report_id = 1;
    ReportType type = 2;
    User creator = 3;

    // Format must be in: YYYY-MM-DD HH:MM:SS
    string creation_date = 4;
    string last_modified_date = 5;

    User last_modifed_user = 6;
    bool is_original = 7;
    bool is_approved = 8;
    User signature = 9;
    string approval_date = 10;
    IncidentReportContent incident_report_content = 11;

    // Which AIFS was the creator from
    int64 aifs_id = 12;

    enum ReportType {
        FIRE_ALARM = 0;
        INTRUDER = 1;
        OTHERS = 2;
    }
}

// The actual content of the report
message IncidentReportContent {
    int64 report_content_id = 1;
    // Format must be in: YYYY-MM-DD HH:MM:SS
    string last_modified_date = 2;    
    User last_modifed_user = 3;
    string address = 4;
    string incident_time = 5;
    bool is_police_notified = 6;
    string title = 7;
    string description = 8;    
    bool has_action_taken = 9;
    string action_taken = 10;
    bool has_injury = 11;
    string injury_description = 12;
    bool has_stolen_item = 13;
    string stolen_item_description = 14;    
    string report_image_link = 15; 
    // Should there be a string here?
}

// Passing around multiple reports in one message. 
message IncidentReportResponse {
    Response response = 1;
    IncidentReport incident_report = 2;
}

// Filter the types of incident reports to be returned. 
message IncidentReportFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        REPORT_ID = 0;
        REPORT_CONTENT_ID = 1;
        REPORT_TYPE = 2;
        MODIFIER = 3;
        LAST_MODIFIED_DATE = 5;
        GET_ORIGINAL = 6;
        IS_APPROVED = 7;
        SIGNATURE = 8;
        APPROVAL_DATE = 9;
    }
}

// Get specific types rosters as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message IncidentReportQuery {
    repeated IncidentReportFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2; 
    // Skip n rows from the database
    int64 skip = 3;

    // Order the queries, by default the order is desc by creation date
    OrderByIncidentReport order_by = 4;
}

message OrderByIncidentReport{
    IncidentReportFilter.Field field = 1;
    OrderBy order_by = 2;
}


/***************************************************************************
*                          CAMERA IOT MESSAGES                             *
****************************************************************************/
// Camera and Iot Monitoring and Controls
message CameraIot {
    // The ID ties the request to a paricular location
    int64 camera_iot_id = 1;
    string name = 2;

    // Devices
    Camera camera = 3;
    gate_prototype.GateState gate = 4;
    gate_prototype.FireAlarmState fire_alarm = 5;
    gate_prototype.CpuTempState cpu_temperature = 6;

    MessageType type = 7;

     enum MessageType{
        INITIAL = 0;
        CHANGE_GATE = 1;
        CHANGE_FIRE_ALARM = 2;
        CHANGE_CPU_TEMP = 3;
     }
}

// camera identifier
message Camera {
    string url = 1;
}

message CameraIotResponse {
    Response response = 1;
    CameraIot camera_iot = 2;
}


// Filter the types of camera iot attributes to be returned. 
message CameraIotFilter {
    Field field = 1;
    Filter comparisons = 2;

    // More fields can be added in the future. 
    enum Field{
        CAMERA_IOT_ID = 0;
    }
}

// Get specific types camera Iot attributes as specified in the Filter. 
// If one wants to get all objects, leave filters empty. 
// A default limit of 10 will be used if the field is empty. 
message CameraIotQuery {
    repeated CameraIotFilter filters = 1;
    // Limit the number of objects being returned. 
    // If only 5 objects should be shown, limit = 5;
    int64 limit = 2; 
    // Skip n rows from the database
    int64 skip = 3;

    // Order the queries, by default the order is desc id
    OrderByCameraIot order_by = 4;
}

message OrderByCameraIot{
    CameraIotFilter.Field field = 1;
    OrderBy order_by = 2;
}
/***************************************************************************
*                              COMMON MESSAGES                              *
****************************************************************************/

// Generic reponses to add or update requests
message Response {
    Type type = 1;
    string error_message = 2;
    // Return any pk of the row that the query modified
    int64 primary_key = 3;

    enum Type {
        ACK = 0;
        ERROR = 1;
    }
}


// This is used to indicate what kind of objects should be returned that
// fit this critera. 
// For example, if one wishes to get all broadcasts that have more than 
// one recipient. They might put the comparison as GREATER, value = 1;
// The field to be compared with is in the corresponding XXXFilter message.
message Filter {
    Comparisons comparison = 1;
    string value = 2;

    enum Comparisons{
        GREATER = 0;
        GREATER_EQ = 1;
        EQUAL = 2;
        LESSER_EQ = 3;
        LESSER = 4;
        CONTAINS = 5;
        IN = 6;
        NOT_IN = 7;
    }
}

enum OrderBy {
    ASC = 0;
    DESC = 1;
}
