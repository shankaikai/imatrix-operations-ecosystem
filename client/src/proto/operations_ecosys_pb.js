// source: operations_ecosys.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.operations_ecosys.Broadcast', null, global);
goog.exportSymbol('proto.operations_ecosys.Broadcast.BroadcastType', null, global);
goog.exportSymbol('proto.operations_ecosys.BroadcastFilter', null, global);
goog.exportSymbol('proto.operations_ecosys.BroadcastFilter.Field', null, global);
goog.exportSymbol('proto.operations_ecosys.BroadcastQuery', null, global);
goog.exportSymbol('proto.operations_ecosys.BulkBroadcasts', null, global);
goog.exportSymbol('proto.operations_ecosys.BulkUsers', null, global);
goog.exportSymbol('proto.operations_ecosys.Filter', null, global);
goog.exportSymbol('proto.operations_ecosys.Filter.Comparisons', null, global);
goog.exportSymbol('proto.operations_ecosys.Response', null, global);
goog.exportSymbol('proto.operations_ecosys.Response.Type', null, global);
goog.exportSymbol('proto.operations_ecosys.User', null, global);
goog.exportSymbol('proto.operations_ecosys.User.UserType', null, global);
goog.exportSymbol('proto.operations_ecosys.UserFilter', null, global);
goog.exportSymbol('proto.operations_ecosys.UserFilter.Field', null, global);
goog.exportSymbol('proto.operations_ecosys.UserQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operations_ecosys.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.User.displayName = 'proto.operations_ecosys.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.BulkUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operations_ecosys.BulkUsers.repeatedFields_, null);
};
goog.inherits(proto.operations_ecosys.BulkUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.BulkUsers.displayName = 'proto.operations_ecosys.BulkUsers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.UserFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operations_ecosys.UserFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.UserFilter.displayName = 'proto.operations_ecosys.UserFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.UserQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operations_ecosys.UserQuery.repeatedFields_, null);
};
goog.inherits(proto.operations_ecosys.UserQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.UserQuery.displayName = 'proto.operations_ecosys.UserQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.Broadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operations_ecosys.Broadcast.repeatedFields_, null);
};
goog.inherits(proto.operations_ecosys.Broadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.Broadcast.displayName = 'proto.operations_ecosys.Broadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.BulkBroadcasts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operations_ecosys.BulkBroadcasts.repeatedFields_, null);
};
goog.inherits(proto.operations_ecosys.BulkBroadcasts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.BulkBroadcasts.displayName = 'proto.operations_ecosys.BulkBroadcasts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.BroadcastFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operations_ecosys.BroadcastFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.BroadcastFilter.displayName = 'proto.operations_ecosys.BroadcastFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.BroadcastQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operations_ecosys.BroadcastQuery.repeatedFields_, null);
};
goog.inherits(proto.operations_ecosys.BroadcastQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.BroadcastQuery.displayName = 'proto.operations_ecosys.BroadcastQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operations_ecosys.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.Response.displayName = 'proto.operations_ecosys.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operations_ecosys.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operations_ecosys.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.operations_ecosys.Filter.displayName = 'proto.operations_ecosys.Filter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.User.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    telegramHandle: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userSecurityImg: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isPartTimer: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.User}
 */
proto.operations_ecosys.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.User;
  return proto.operations_ecosys.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.User}
 */
proto.operations_ecosys.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.operations_ecosys.User.UserType} */ (reader.readEnum());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelegramHandle(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserSecurityImg(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPartTimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTelegramHandle();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserSecurityImg();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsPartTimer();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.User.UserType = {
  ISPECIALIST: 0,
  SECURITY_GUARD: 1,
  CONTROLLER: 2,
  MANAGER: 3
};

/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.operations_ecosys.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional UserType user_type = 2;
 * @return {!proto.operations_ecosys.User.UserType}
 */
proto.operations_ecosys.User.prototype.getUserType = function() {
  return /** @type {!proto.operations_ecosys.User.UserType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.operations_ecosys.User.UserType} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setUserType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.operations_ecosys.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.operations_ecosys.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string phone_number = 5;
 * @return {string}
 */
proto.operations_ecosys.User.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string telegram_handle = 6;
 * @return {string}
 */
proto.operations_ecosys.User.prototype.getTelegramHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setTelegramHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_security_img = 7;
 * @return {string}
 */
proto.operations_ecosys.User.prototype.getUserSecurityImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setUserSecurityImg = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_part_timer = 8;
 * @return {boolean}
 */
proto.operations_ecosys.User.prototype.getIsPartTimer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.operations_ecosys.User} returns this
 */
proto.operations_ecosys.User.prototype.setIsPartTimer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operations_ecosys.BulkUsers.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.BulkUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.BulkUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.BulkUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BulkUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.operations_ecosys.Response.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.operations_ecosys.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.BulkUsers}
 */
proto.operations_ecosys.BulkUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.BulkUsers;
  return proto.operations_ecosys.BulkUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.BulkUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.BulkUsers}
 */
proto.operations_ecosys.BulkUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operations_ecosys.Response;
      reader.readMessage(value,proto.operations_ecosys.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.operations_ecosys.User;
      reader.readMessage(value,proto.operations_ecosys.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.BulkUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.BulkUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.BulkUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BulkUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.operations_ecosys.Response.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.operations_ecosys.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response response = 1;
 * @return {?proto.operations_ecosys.Response}
 */
proto.operations_ecosys.BulkUsers.prototype.getResponse = function() {
  return /** @type{?proto.operations_ecosys.Response} */ (
    jspb.Message.getWrapperField(this, proto.operations_ecosys.Response, 1));
};


/**
 * @param {?proto.operations_ecosys.Response|undefined} value
 * @return {!proto.operations_ecosys.BulkUsers} returns this
*/
proto.operations_ecosys.BulkUsers.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.BulkUsers} returns this
 */
proto.operations_ecosys.BulkUsers.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.BulkUsers.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated User users = 2;
 * @return {!Array<!proto.operations_ecosys.User>}
 */
proto.operations_ecosys.BulkUsers.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.operations_ecosys.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operations_ecosys.User, 2));
};


/**
 * @param {!Array<!proto.operations_ecosys.User>} value
 * @return {!proto.operations_ecosys.BulkUsers} returns this
*/
proto.operations_ecosys.BulkUsers.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.operations_ecosys.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operations_ecosys.User}
 */
proto.operations_ecosys.BulkUsers.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.operations_ecosys.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.operations_ecosys.BulkUsers} returns this
 */
proto.operations_ecosys.BulkUsers.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.UserFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.UserFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.UserFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.UserFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comparisons: (f = msg.getComparisons()) && proto.operations_ecosys.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.UserFilter}
 */
proto.operations_ecosys.UserFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.UserFilter;
  return proto.operations_ecosys.UserFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.UserFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.UserFilter}
 */
proto.operations_ecosys.UserFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.operations_ecosys.UserFilter.Field} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = new proto.operations_ecosys.Filter;
      reader.readMessage(value,proto.operations_ecosys.Filter.deserializeBinaryFromReader);
      msg.setComparisons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.UserFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.UserFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.UserFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.UserFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getComparisons();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operations_ecosys.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.UserFilter.Field = {
  USER_ID: 0,
  TYPE: 1,
  NAME: 2,
  EMAIL: 3,
  PHONE_NUMBER: 4,
  TELEGRAM_HANDLE: 5,
  IS_PART_TIMER: 6
};

/**
 * optional Field field = 1;
 * @return {!proto.operations_ecosys.UserFilter.Field}
 */
proto.operations_ecosys.UserFilter.prototype.getField = function() {
  return /** @type {!proto.operations_ecosys.UserFilter.Field} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.operations_ecosys.UserFilter.Field} value
 * @return {!proto.operations_ecosys.UserFilter} returns this
 */
proto.operations_ecosys.UserFilter.prototype.setField = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Filter comparisons = 2;
 * @return {?proto.operations_ecosys.Filter}
 */
proto.operations_ecosys.UserFilter.prototype.getComparisons = function() {
  return /** @type{?proto.operations_ecosys.Filter} */ (
    jspb.Message.getWrapperField(this, proto.operations_ecosys.Filter, 2));
};


/**
 * @param {?proto.operations_ecosys.Filter|undefined} value
 * @return {!proto.operations_ecosys.UserFilter} returns this
*/
proto.operations_ecosys.UserFilter.prototype.setComparisons = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.UserFilter} returns this
 */
proto.operations_ecosys.UserFilter.prototype.clearComparisons = function() {
  return this.setComparisons(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.UserFilter.prototype.hasComparisons = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operations_ecosys.UserQuery.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.UserQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.UserQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.UserQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.UserQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.operations_ecosys.UserFilter.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.UserQuery}
 */
proto.operations_ecosys.UserQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.UserQuery;
  return proto.operations_ecosys.UserQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.UserQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.UserQuery}
 */
proto.operations_ecosys.UserQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operations_ecosys.UserFilter;
      reader.readMessage(value,proto.operations_ecosys.UserFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.UserQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.UserQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.UserQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.UserQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.operations_ecosys.UserFilter.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated UserFilter filters = 1;
 * @return {!Array<!proto.operations_ecosys.UserFilter>}
 */
proto.operations_ecosys.UserQuery.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.operations_ecosys.UserFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operations_ecosys.UserFilter, 1));
};


/**
 * @param {!Array<!proto.operations_ecosys.UserFilter>} value
 * @return {!proto.operations_ecosys.UserQuery} returns this
*/
proto.operations_ecosys.UserQuery.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.operations_ecosys.UserFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operations_ecosys.UserFilter}
 */
proto.operations_ecosys.UserQuery.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.operations_ecosys.UserFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.operations_ecosys.UserQuery} returns this
 */
proto.operations_ecosys.UserQuery.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.operations_ecosys.UserQuery.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.operations_ecosys.UserQuery} returns this
 */
proto.operations_ecosys.UserQuery.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operations_ecosys.Broadcast.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.Broadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.Broadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.Broadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Broadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    broadcastId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    content: jspb.Message.getFieldWithDefault(msg, 4, ""),
    creationDate: (f = msg.getCreationDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    deadline: (f = msg.getDeadline()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && proto.operations_ecosys.User.toObject(includeInstance, f),
    receipientsList: jspb.Message.toObjectList(msg.getReceipientsList(),
    proto.operations_ecosys.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.Broadcast}
 */
proto.operations_ecosys.Broadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.Broadcast;
  return proto.operations_ecosys.Broadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.Broadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.Broadcast}
 */
proto.operations_ecosys.Broadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBroadcastId(value);
      break;
    case 2:
      var value = /** @type {!proto.operations_ecosys.Broadcast.BroadcastType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreationDate(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    case 7:
      var value = new proto.operations_ecosys.User;
      reader.readMessage(value,proto.operations_ecosys.User.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 8:
      var value = new proto.operations_ecosys.User;
      reader.readMessage(value,proto.operations_ecosys.User.deserializeBinaryFromReader);
      msg.addReceipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.Broadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.Broadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.Broadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Broadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBroadcastId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreationDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.operations_ecosys.User.serializeBinaryToWriter
    );
  }
  f = message.getReceipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.operations_ecosys.User.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.Broadcast.BroadcastType = {
  ANNOUNCEMENT: 0,
  ASSIGNMENT: 1
};

/**
 * optional int64 broadcast_id = 1;
 * @return {number}
 */
proto.operations_ecosys.Broadcast.prototype.getBroadcastId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.setBroadcastId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BroadcastType type = 2;
 * @return {!proto.operations_ecosys.Broadcast.BroadcastType}
 */
proto.operations_ecosys.Broadcast.prototype.getType = function() {
  return /** @type {!proto.operations_ecosys.Broadcast.BroadcastType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.operations_ecosys.Broadcast.BroadcastType} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.operations_ecosys.Broadcast.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.operations_ecosys.Broadcast.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp creation_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.operations_ecosys.Broadcast.prototype.getCreationDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
*/
proto.operations_ecosys.Broadcast.prototype.setCreationDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.clearCreationDate = function() {
  return this.setCreationDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.Broadcast.prototype.hasCreationDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp deadline = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.operations_ecosys.Broadcast.prototype.getDeadline = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
*/
proto.operations_ecosys.Broadcast.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.Broadcast.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional User creator = 7;
 * @return {?proto.operations_ecosys.User}
 */
proto.operations_ecosys.Broadcast.prototype.getCreator = function() {
  return /** @type{?proto.operations_ecosys.User} */ (
    jspb.Message.getWrapperField(this, proto.operations_ecosys.User, 7));
};


/**
 * @param {?proto.operations_ecosys.User|undefined} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
*/
proto.operations_ecosys.Broadcast.prototype.setCreator = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.clearCreator = function() {
  return this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.Broadcast.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated User receipients = 8;
 * @return {!Array<!proto.operations_ecosys.User>}
 */
proto.operations_ecosys.Broadcast.prototype.getReceipientsList = function() {
  return /** @type{!Array<!proto.operations_ecosys.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operations_ecosys.User, 8));
};


/**
 * @param {!Array<!proto.operations_ecosys.User>} value
 * @return {!proto.operations_ecosys.Broadcast} returns this
*/
proto.operations_ecosys.Broadcast.prototype.setReceipientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.operations_ecosys.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operations_ecosys.User}
 */
proto.operations_ecosys.Broadcast.prototype.addReceipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.operations_ecosys.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.operations_ecosys.Broadcast} returns this
 */
proto.operations_ecosys.Broadcast.prototype.clearReceipientsList = function() {
  return this.setReceipientsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operations_ecosys.BulkBroadcasts.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.BulkBroadcasts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.BulkBroadcasts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BulkBroadcasts.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.operations_ecosys.Response.toObject(includeInstance, f),
    broadcastsList: jspb.Message.toObjectList(msg.getBroadcastsList(),
    proto.operations_ecosys.Broadcast.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.BulkBroadcasts}
 */
proto.operations_ecosys.BulkBroadcasts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.BulkBroadcasts;
  return proto.operations_ecosys.BulkBroadcasts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.BulkBroadcasts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.BulkBroadcasts}
 */
proto.operations_ecosys.BulkBroadcasts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operations_ecosys.Response;
      reader.readMessage(value,proto.operations_ecosys.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.operations_ecosys.Broadcast;
      reader.readMessage(value,proto.operations_ecosys.Broadcast.deserializeBinaryFromReader);
      msg.addBroadcasts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.BulkBroadcasts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.BulkBroadcasts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BulkBroadcasts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.operations_ecosys.Response.serializeBinaryToWriter
    );
  }
  f = message.getBroadcastsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.operations_ecosys.Broadcast.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response response = 1;
 * @return {?proto.operations_ecosys.Response}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.getResponse = function() {
  return /** @type{?proto.operations_ecosys.Response} */ (
    jspb.Message.getWrapperField(this, proto.operations_ecosys.Response, 1));
};


/**
 * @param {?proto.operations_ecosys.Response|undefined} value
 * @return {!proto.operations_ecosys.BulkBroadcasts} returns this
*/
proto.operations_ecosys.BulkBroadcasts.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.BulkBroadcasts} returns this
 */
proto.operations_ecosys.BulkBroadcasts.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Broadcast broadcasts = 2;
 * @return {!Array<!proto.operations_ecosys.Broadcast>}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.getBroadcastsList = function() {
  return /** @type{!Array<!proto.operations_ecosys.Broadcast>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operations_ecosys.Broadcast, 2));
};


/**
 * @param {!Array<!proto.operations_ecosys.Broadcast>} value
 * @return {!proto.operations_ecosys.BulkBroadcasts} returns this
*/
proto.operations_ecosys.BulkBroadcasts.prototype.setBroadcastsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.operations_ecosys.Broadcast=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operations_ecosys.Broadcast}
 */
proto.operations_ecosys.BulkBroadcasts.prototype.addBroadcasts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.operations_ecosys.Broadcast, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.operations_ecosys.BulkBroadcasts} returns this
 */
proto.operations_ecosys.BulkBroadcasts.prototype.clearBroadcastsList = function() {
  return this.setBroadcastsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.BroadcastFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.BroadcastFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.BroadcastFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BroadcastFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comparisons: (f = msg.getComparisons()) && proto.operations_ecosys.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.BroadcastFilter}
 */
proto.operations_ecosys.BroadcastFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.BroadcastFilter;
  return proto.operations_ecosys.BroadcastFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.BroadcastFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.BroadcastFilter}
 */
proto.operations_ecosys.BroadcastFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.operations_ecosys.BroadcastFilter.Field} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = new proto.operations_ecosys.Filter;
      reader.readMessage(value,proto.operations_ecosys.Filter.deserializeBinaryFromReader);
      msg.setComparisons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.BroadcastFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.BroadcastFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.BroadcastFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BroadcastFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getComparisons();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operations_ecosys.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.BroadcastFilter.Field = {
  BROADCAST_ID: 0,
  TYPE: 1,
  TITLE: 2,
  CONTENT: 3,
  CREATION_DATE: 4,
  DEADLINE: 5,
  CREATOR: 6,
  RECEIPEIENTS: 7,
  NUM_RECEIPIENTS: 8
};

/**
 * optional Field field = 1;
 * @return {!proto.operations_ecosys.BroadcastFilter.Field}
 */
proto.operations_ecosys.BroadcastFilter.prototype.getField = function() {
  return /** @type {!proto.operations_ecosys.BroadcastFilter.Field} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.operations_ecosys.BroadcastFilter.Field} value
 * @return {!proto.operations_ecosys.BroadcastFilter} returns this
 */
proto.operations_ecosys.BroadcastFilter.prototype.setField = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Filter comparisons = 2;
 * @return {?proto.operations_ecosys.Filter}
 */
proto.operations_ecosys.BroadcastFilter.prototype.getComparisons = function() {
  return /** @type{?proto.operations_ecosys.Filter} */ (
    jspb.Message.getWrapperField(this, proto.operations_ecosys.Filter, 2));
};


/**
 * @param {?proto.operations_ecosys.Filter|undefined} value
 * @return {!proto.operations_ecosys.BroadcastFilter} returns this
*/
proto.operations_ecosys.BroadcastFilter.prototype.setComparisons = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.operations_ecosys.BroadcastFilter} returns this
 */
proto.operations_ecosys.BroadcastFilter.prototype.clearComparisons = function() {
  return this.setComparisons(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.operations_ecosys.BroadcastFilter.prototype.hasComparisons = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operations_ecosys.BroadcastQuery.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.BroadcastQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.BroadcastQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.BroadcastQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BroadcastQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.operations_ecosys.BroadcastFilter.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.BroadcastQuery}
 */
proto.operations_ecosys.BroadcastQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.BroadcastQuery;
  return proto.operations_ecosys.BroadcastQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.BroadcastQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.BroadcastQuery}
 */
proto.operations_ecosys.BroadcastQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operations_ecosys.BroadcastFilter;
      reader.readMessage(value,proto.operations_ecosys.BroadcastFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.BroadcastQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.BroadcastQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.BroadcastQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.BroadcastQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.operations_ecosys.BroadcastFilter.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated BroadcastFilter filters = 1;
 * @return {!Array<!proto.operations_ecosys.BroadcastFilter>}
 */
proto.operations_ecosys.BroadcastQuery.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.operations_ecosys.BroadcastFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operations_ecosys.BroadcastFilter, 1));
};


/**
 * @param {!Array<!proto.operations_ecosys.BroadcastFilter>} value
 * @return {!proto.operations_ecosys.BroadcastQuery} returns this
*/
proto.operations_ecosys.BroadcastQuery.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.operations_ecosys.BroadcastFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operations_ecosys.BroadcastFilter}
 */
proto.operations_ecosys.BroadcastQuery.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.operations_ecosys.BroadcastFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.operations_ecosys.BroadcastQuery} returns this
 */
proto.operations_ecosys.BroadcastQuery.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.operations_ecosys.BroadcastQuery.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.operations_ecosys.BroadcastQuery} returns this
 */
proto.operations_ecosys.BroadcastQuery.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    primaryKey: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.Response}
 */
proto.operations_ecosys.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.Response;
  return proto.operations_ecosys.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.Response}
 */
proto.operations_ecosys.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.operations_ecosys.Response.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrimaryKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrimaryKey();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.Response.Type = {
  ACK: 0,
  ERROR: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.operations_ecosys.Response.Type}
 */
proto.operations_ecosys.Response.prototype.getType = function() {
  return /** @type {!proto.operations_ecosys.Response.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.operations_ecosys.Response.Type} value
 * @return {!proto.operations_ecosys.Response} returns this
 */
proto.operations_ecosys.Response.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.operations_ecosys.Response.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.Response} returns this
 */
proto.operations_ecosys.Response.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 primary_key = 3;
 * @return {number}
 */
proto.operations_ecosys.Response.prototype.getPrimaryKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.operations_ecosys.Response} returns this
 */
proto.operations_ecosys.Response.prototype.setPrimaryKey = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operations_ecosys.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.operations_ecosys.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operations_ecosys.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    comparison: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operations_ecosys.Filter}
 */
proto.operations_ecosys.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operations_ecosys.Filter;
  return proto.operations_ecosys.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operations_ecosys.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operations_ecosys.Filter}
 */
proto.operations_ecosys.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.operations_ecosys.Filter.Comparisons} */ (reader.readEnum());
      msg.setComparison(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operations_ecosys.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.operations_ecosys.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.operations_ecosys.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.operations_ecosys.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComparison();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.operations_ecosys.Filter.Comparisons = {
  GREATER: 0,
  GREATER_EQ: 1,
  EQUAL: 2,
  LESSER_EQ: 3,
  LESSER: 4,
  CONTAINS: 5
};

/**
 * optional Comparisons comparison = 1;
 * @return {!proto.operations_ecosys.Filter.Comparisons}
 */
proto.operations_ecosys.Filter.prototype.getComparison = function() {
  return /** @type {!proto.operations_ecosys.Filter.Comparisons} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.operations_ecosys.Filter.Comparisons} value
 * @return {!proto.operations_ecosys.Filter} returns this
 */
proto.operations_ecosys.Filter.prototype.setComparison = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.operations_ecosys.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.operations_ecosys.Filter} returns this
 */
proto.operations_ecosys.Filter.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.operations_ecosys);
