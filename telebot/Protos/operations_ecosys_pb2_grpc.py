# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import operations_ecosys_pb2 as operations__ecosys__pb2


class AdminServicesStub(object):
    """Note for updates:
    If the object fields should be updated, 
    fields that do not need to be updated can be blank.
    However, do note that enums and bools have default values, 
    hence enums and bools should always be filled. 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddUser = channel.unary_unary(
                '/operations_ecosys.AdminServices/AddUser',
                request_serializer=operations__ecosys__pb2.User.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/operations_ecosys.AdminServices/UpdateUser',
                request_serializer=operations__ecosys__pb2.User.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/operations_ecosys.AdminServices/DeleteUser',
                request_serializer=operations__ecosys__pb2.User.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.FindUsers = channel.unary_stream(
                '/operations_ecosys.AdminServices/FindUsers',
                request_serializer=operations__ecosys__pb2.UserQuery.SerializeToString,
                response_deserializer=operations__ecosys__pb2.UsersResponse.FromString,
                )
        self.AddClient = channel.unary_unary(
                '/operations_ecosys.AdminServices/AddClient',
                request_serializer=operations__ecosys__pb2.Client.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.UpdateClient = channel.unary_unary(
                '/operations_ecosys.AdminServices/UpdateClient',
                request_serializer=operations__ecosys__pb2.Client.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.DeleteClient = channel.unary_unary(
                '/operations_ecosys.AdminServices/DeleteClient',
                request_serializer=operations__ecosys__pb2.Client.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.FindClients = channel.unary_stream(
                '/operations_ecosys.AdminServices/FindClients',
                request_serializer=operations__ecosys__pb2.ClientQuery.SerializeToString,
                response_deserializer=operations__ecosys__pb2.ClientResponse.FromString,
                )


class AdminServicesServicer(object):
    """Note for updates:
    If the object fields should be updated, 
    fields that do not need to be updated can be blank.
    However, do note that enums and bools have default values, 
    hence enums and bools should always be filled. 

    """

    def AddUser(self, request, context):
        """User
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUsers(self, request, context):
        """TODO change user response to have user scoring and stuff
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddClient(self, request, context):
        """Client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=operations__ecosys__pb2.User.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=operations__ecosys__pb2.User.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=operations__ecosys__pb2.User.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'FindUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.FindUsers,
                    request_deserializer=operations__ecosys__pb2.UserQuery.FromString,
                    response_serializer=operations__ecosys__pb2.UsersResponse.SerializeToString,
            ),
            'AddClient': grpc.unary_unary_rpc_method_handler(
                    servicer.AddClient,
                    request_deserializer=operations__ecosys__pb2.Client.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'UpdateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClient,
                    request_deserializer=operations__ecosys__pb2.Client.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'DeleteClient': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClient,
                    request_deserializer=operations__ecosys__pb2.Client.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'FindClients': grpc.unary_stream_rpc_method_handler(
                    servicer.FindClients,
                    request_deserializer=operations__ecosys__pb2.ClientQuery.FromString,
                    response_serializer=operations__ecosys__pb2.ClientResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'operations_ecosys.AdminServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminServices(object):
    """Note for updates:
    If the object fields should be updated, 
    fields that do not need to be updated can be blank.
    However, do note that enums and bools have default values, 
    hence enums and bools should always be filled. 

    """

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/AddUser',
            operations__ecosys__pb2.User.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/UpdateUser',
            operations__ecosys__pb2.User.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/DeleteUser',
            operations__ecosys__pb2.User.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operations_ecosys.AdminServices/FindUsers',
            operations__ecosys__pb2.UserQuery.SerializeToString,
            operations__ecosys__pb2.UsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/AddClient',
            operations__ecosys__pb2.Client.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/UpdateClient',
            operations__ecosys__pb2.Client.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.AdminServices/DeleteClient',
            operations__ecosys__pb2.Client.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operations_ecosys.AdminServices/FindClients',
            operations__ecosys__pb2.ClientQuery.SerializeToString,
            operations__ecosys__pb2.ClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BroadcastServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddBroadcast = channel.unary_unary(
                '/operations_ecosys.BroadcastServices/AddBroadcast',
                request_serializer=operations__ecosys__pb2.Broadcast.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.UpdateBroadcast = channel.unary_unary(
                '/operations_ecosys.BroadcastServices/UpdateBroadcast',
                request_serializer=operations__ecosys__pb2.Broadcast.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.DeleteBroadcast = channel.unary_unary(
                '/operations_ecosys.BroadcastServices/DeleteBroadcast',
                request_serializer=operations__ecosys__pb2.Broadcast.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.FindBroadcasts = channel.unary_stream(
                '/operations_ecosys.BroadcastServices/FindBroadcasts',
                request_serializer=operations__ecosys__pb2.BroadcastQuery.SerializeToString,
                response_deserializer=operations__ecosys__pb2.BroadcastResponse.FromString,
                )
        self.UpdateBroadcastRecipient = channel.unary_unary(
                '/operations_ecosys.BroadcastServices/UpdateBroadcastRecipient',
                request_serializer=operations__ecosys__pb2.BroadcastRecipient.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )


class BroadcastServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddBroadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBroadcast(self, request, context):
        """Note that this update does not update the broadcast's recipient's inner status 
        such as the acknowledgement or rejection status but only if the recipient 
        is part of the broadcast.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBroadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindBroadcasts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBroadcastRecipient(self, request, context):
        """Updating of broadcast recipients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BroadcastServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBroadcast,
                    request_deserializer=operations__ecosys__pb2.Broadcast.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'UpdateBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBroadcast,
                    request_deserializer=operations__ecosys__pb2.Broadcast.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'DeleteBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBroadcast,
                    request_deserializer=operations__ecosys__pb2.Broadcast.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'FindBroadcasts': grpc.unary_stream_rpc_method_handler(
                    servicer.FindBroadcasts,
                    request_deserializer=operations__ecosys__pb2.BroadcastQuery.FromString,
                    response_serializer=operations__ecosys__pb2.BroadcastResponse.SerializeToString,
            ),
            'UpdateBroadcastRecipient': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBroadcastRecipient,
                    request_deserializer=operations__ecosys__pb2.BroadcastRecipient.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'operations_ecosys.BroadcastServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BroadcastServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.BroadcastServices/AddBroadcast',
            operations__ecosys__pb2.Broadcast.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.BroadcastServices/UpdateBroadcast',
            operations__ecosys__pb2.Broadcast.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.BroadcastServices/DeleteBroadcast',
            operations__ecosys__pb2.Broadcast.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindBroadcasts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operations_ecosys.BroadcastServices/FindBroadcasts',
            operations__ecosys__pb2.BroadcastQuery.SerializeToString,
            operations__ecosys__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBroadcastRecipient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.BroadcastServices/UpdateBroadcastRecipient',
            operations__ecosys__pb2.BroadcastRecipient.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RosterServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRoster = channel.unary_unary(
                '/operations_ecosys.RosterServices/AddRoster',
                request_serializer=operations__ecosys__pb2.BulkRosters.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.UpdateRoster = channel.unary_unary(
                '/operations_ecosys.RosterServices/UpdateRoster',
                request_serializer=operations__ecosys__pb2.BulkRosters.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.DeleteRoster = channel.unary_unary(
                '/operations_ecosys.RosterServices/DeleteRoster',
                request_serializer=operations__ecosys__pb2.Roster.SerializeToString,
                response_deserializer=operations__ecosys__pb2.Response.FromString,
                )
        self.FindRosters = channel.unary_stream(
                '/operations_ecosys.RosterServices/FindRosters',
                request_serializer=operations__ecosys__pb2.RosterQuery.SerializeToString,
                response_deserializer=operations__ecosys__pb2.RosterResponse.FromString,
                )
        self.GetAvailableUsers = channel.unary_stream(
                '/operations_ecosys.RosterServices/GetAvailableUsers',
                request_serializer=operations__ecosys__pb2.AvailabilityQuery.SerializeToString,
                response_deserializer=operations__ecosys__pb2.EmployeeEvaluationResponse.FromString,
                )


class RosterServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRoster(self, request, context):
        """Add multiple rosters for different AIFS at the same time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRoster(self, request, context):
        """Note that this update does not update the roster's guard's inner status 
        such as the acknowledgement or attended status but only if the guard 
        is part of the roster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRoster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindRosters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RosterServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRoster': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoster,
                    request_deserializer=operations__ecosys__pb2.BulkRosters.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'UpdateRoster': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRoster,
                    request_deserializer=operations__ecosys__pb2.BulkRosters.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'DeleteRoster': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRoster,
                    request_deserializer=operations__ecosys__pb2.Roster.FromString,
                    response_serializer=operations__ecosys__pb2.Response.SerializeToString,
            ),
            'FindRosters': grpc.unary_stream_rpc_method_handler(
                    servicer.FindRosters,
                    request_deserializer=operations__ecosys__pb2.RosterQuery.FromString,
                    response_serializer=operations__ecosys__pb2.RosterResponse.SerializeToString,
            ),
            'GetAvailableUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAvailableUsers,
                    request_deserializer=operations__ecosys__pb2.AvailabilityQuery.FromString,
                    response_serializer=operations__ecosys__pb2.EmployeeEvaluationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'operations_ecosys.RosterServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RosterServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRoster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.RosterServices/AddRoster',
            operations__ecosys__pb2.BulkRosters.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRoster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.RosterServices/UpdateRoster',
            operations__ecosys__pb2.BulkRosters.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRoster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operations_ecosys.RosterServices/DeleteRoster',
            operations__ecosys__pb2.Roster.SerializeToString,
            operations__ecosys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindRosters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operations_ecosys.RosterServices/FindRosters',
            operations__ecosys__pb2.RosterQuery.SerializeToString,
            operations__ecosys__pb2.RosterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operations_ecosys.RosterServices/GetAvailableUsers',
            operations__ecosys__pb2.AvailabilityQuery.SerializeToString,
            operations__ecosys__pb2.EmployeeEvaluationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
