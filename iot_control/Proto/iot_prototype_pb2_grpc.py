# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import iot_prototype_pb2 as iot__prototype__pb2


class IotControlPrototypeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGateState = channel.unary_stream(
                '/gate_prototype.IotControlPrototypeService/GetGateState',
                request_serializer=iot__prototype__pb2.Gate.SerializeToString,
                response_deserializer=iot__prototype__pb2.GateState.FromString,
                )
        self.SetGateState = channel.stream_stream(
                '/gate_prototype.IotControlPrototypeService/SetGateState',
                request_serializer=iot__prototype__pb2.GateState.SerializeToString,
                response_deserializer=iot__prototype__pb2.GateState.FromString,
                )
        self.GetFireAlarmState = channel.unary_stream(
                '/gate_prototype.IotControlPrototypeService/GetFireAlarmState',
                request_serializer=iot__prototype__pb2.FireAlarm.SerializeToString,
                response_deserializer=iot__prototype__pb2.FireAlarmState.FromString,
                )
        self.GetCpuTemp = channel.unary_stream(
                '/gate_prototype.IotControlPrototypeService/GetCpuTemp',
                request_serializer=iot__prototype__pb2.CpuTemp.SerializeToString,
                response_deserializer=iot__prototype__pb2.CpuTempState.FromString,
                )


class IotControlPrototypeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetGateState(self, request, context):
        """A server-to-client streaming RPC.

        Obtains the State of the Stepper.  Results are
        streamed rather than returned at once (e.g. in a response message with a
        repeated field), as the Stepper's state will change after every action
        made by the Controller.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGateState(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFireAlarmState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCpuTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IotControlPrototypeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGateState': grpc.unary_stream_rpc_method_handler(
                    servicer.GetGateState,
                    request_deserializer=iot__prototype__pb2.Gate.FromString,
                    response_serializer=iot__prototype__pb2.GateState.SerializeToString,
            ),
            'SetGateState': grpc.stream_stream_rpc_method_handler(
                    servicer.SetGateState,
                    request_deserializer=iot__prototype__pb2.GateState.FromString,
                    response_serializer=iot__prototype__pb2.GateState.SerializeToString,
            ),
            'GetFireAlarmState': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFireAlarmState,
                    request_deserializer=iot__prototype__pb2.FireAlarm.FromString,
                    response_serializer=iot__prototype__pb2.FireAlarmState.SerializeToString,
            ),
            'GetCpuTemp': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCpuTemp,
                    request_deserializer=iot__prototype__pb2.CpuTemp.FromString,
                    response_serializer=iot__prototype__pb2.CpuTempState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gate_prototype.IotControlPrototypeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IotControlPrototypeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetGateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gate_prototype.IotControlPrototypeService/GetGateState',
            iot__prototype__pb2.Gate.SerializeToString,
            iot__prototype__pb2.GateState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGateState(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gate_prototype.IotControlPrototypeService/SetGateState',
            iot__prototype__pb2.GateState.SerializeToString,
            iot__prototype__pb2.GateState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFireAlarmState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gate_prototype.IotControlPrototypeService/GetFireAlarmState',
            iot__prototype__pb2.FireAlarm.SerializeToString,
            iot__prototype__pb2.FireAlarmState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCpuTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gate_prototype.IotControlPrototypeService/GetCpuTemp',
            iot__prototype__pb2.CpuTemp.SerializeToString,
            iot__prototype__pb2.CpuTempState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
