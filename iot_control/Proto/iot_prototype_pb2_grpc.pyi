"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
from . import iot_prototype_pb2
import typing

class IotControlPrototypeServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetGateState: grpc.UnaryStreamMultiCallable[
        iot_prototype_pb2.Gate,
        iot_prototype_pb2.GateState]
    """A server-to-client streaming RPC.

    Obtains the State of the Stepper.  Results are
    streamed rather than returned at once (e.g. in a response message with a
    repeated field), as the Stepper's state will change after every action
    made by the Controller.
    """

    SetGateState: grpc.StreamStreamMultiCallable[
        iot_prototype_pb2.GateState,
        iot_prototype_pb2.GateState]

    GetFireAlarmState: grpc.UnaryStreamMultiCallable[
        iot_prototype_pb2.FireAlarm,
        iot_prototype_pb2.FireAlarmState]


class IotControlPrototypeServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetGateState(self,
        request: iot_prototype_pb2.Gate,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[iot_prototype_pb2.GateState]:
        """A server-to-client streaming RPC.

        Obtains the State of the Stepper.  Results are
        streamed rather than returned at once (e.g. in a response message with a
        repeated field), as the Stepper's state will change after every action
        made by the Controller.
        """
        pass

    @abc.abstractmethod
    def SetGateState(self,
        request_iterator: typing.Iterator[iot_prototype_pb2.GateState],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[iot_prototype_pb2.GateState]: ...

    @abc.abstractmethod
    def GetFireAlarmState(self,
        request: iot_prototype_pb2.FireAlarm,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[iot_prototype_pb2.FireAlarmState]: ...


def add_IotControlPrototypeServiceServicer_to_server(servicer: IotControlPrototypeServiceServicer, server: grpc.Server) -> None: ...
